{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MCP DevBench","text":"<p>Production-ready Docker container management server implementing the Model Context Protocol (MCP)</p> <p>MCP DevBench provides isolated, persistent development workspaces through a secure, audited, and observable container management API. Built for AI assistants like Claude, it enables safe command execution and filesystem operations in Docker containers.</p>"},{"location":"#features","title":"\u2728 Features","text":""},{"location":"#core-capabilities","title":"Core Capabilities","text":"<ul> <li>\ud83d\ude80 Container Lifecycle Management - Create, start, stop, and remove Docker containers with fine-grained control</li> <li>\ud83d\udcc1 Secure Filesystem Operations - Read, write, delete files with path validation and ETag-based concurrency control</li> <li>\u26a1 Async Command Execution - Non-blocking execution with streaming output and timeout handling</li> <li>\ud83d\udd10 Enterprise Security - Capability dropping, read-only rootfs, resource limits, and comprehensive audit logging</li> <li>\ud83d\udcca Production Observability - Prometheus metrics, structured JSON logging, and system health monitoring</li> </ul>"},{"location":"#advanced-features","title":"Advanced Features","text":"<ul> <li>Warm Container Pool - Sub-second container provisioning for instant attach</li> <li>Graceful Shutdown - Drain active operations before server termination</li> <li>Automatic Recovery - Reconciles Docker state with database on startup</li> <li>Image Policy Enforcement - Allow-list validation with digest pinning</li> <li>Multi-Transport Support - stdio, SSE, or HTTP-based MCP transports</li> <li>Flexible Authentication - None, Bearer token, or OIDC authentication modes</li> </ul>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+</li> <li>Docker Engine</li> <li>uv package manager</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code># Install uv\npip install uv\n\n# Clone the repository\ngit clone https://github.com/pvliesdonk/mcp-devbench.git\ncd mcp-devbench\n\n# Install dependencies\nuv sync\n</code></pre>"},{"location":"#running-the-server","title":"Running the Server","text":"<p>Development Mode (stdio) <pre><code>uv run python -m mcp_devbench.server\n</code></pre></p> <p>Production Mode (HTTP) <pre><code>export MCP_TRANSPORT_MODE=streamable-http\nexport MCP_HOST=0.0.0.0\nexport MCP_PORT=8000\nuv run python -m mcp_devbench.server\n</code></pre></p> <p>Using Docker <pre><code>docker build -t mcp-devbench .\ndocker run -v /var/run/docker.sock:/var/run/docker.sock \\\n  -p 8000:8000 \\\n  -e MCP_TRANSPORT_MODE=streamable-http \\\n  mcp-devbench\n</code></pre></p> <p>Using Docker Compose <pre><code>docker-compose up -d\n</code></pre></p>"},{"location":"#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>Getting Started - Installation and quick start guide</li> <li>User Guide - Learn how to use MCP DevBench</li> <li>API Reference - Complete API documentation</li> <li>Operations - Deployment and operational guides</li> <li>Development - Contributing to MCP DevBench</li> </ul>"},{"location":"#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":"<pre><code>graph TD\n    A[MCP Client] --&gt;|MCP Protocol| B[FastMCP Server]\n    B --&gt; C[Container Manager]\n    B --&gt; D[Exec Manager]\n    B --&gt; E[Filesystem Manager]\n    C --&gt; F[Docker Daemon]\n    D --&gt; F\n    E --&gt; F\n    C --&gt; G[(SQLite Database)]\n    D --&gt; G\n    E --&gt; G\n    B --&gt; H[Security Manager]\n    B --&gt; I[Audit Logger]\n    B --&gt; J[Metrics]</code></pre>"},{"location":"#security","title":"\ud83d\udd10 Security","text":"<p>MCP DevBench is designed with security as a top priority:</p> <ul> <li>Isolated Containers - Each workspace runs in its own Docker container</li> <li>Capability Dropping - Containers run with minimal Linux capabilities</li> <li>Read-only Rootfs - Container root filesystem is read-only</li> <li>Resource Limits - CPU, memory, and PID limits enforced</li> <li>Path Validation - All filesystem operations validated against workspace directory</li> <li>Audit Logging - All operations logged with structured metadata</li> <li>Image Policy - Only allowed images can be spawned</li> </ul> <p>See the Security Guide for more details.</p>"},{"location":"#observability","title":"\ud83d\udcca Observability","text":"<p>Built-in observability features:</p> <ul> <li>Prometheus Metrics - Container count, execution time, filesystem operations</li> <li>Structured Logging - JSON-formatted logs with correlation IDs</li> <li>Health Checks - Ready and live endpoints for orchestration</li> <li>Audit Trail - Complete history of all operations</li> </ul> <p>See the Monitoring Guide for more details.</p>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions! Please see our Contributing Guide for details.</p>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"#links","title":"\ud83d\udd17 Links","text":"<ul> <li>GitHub Repository: pvliesdonk/mcp-devbench</li> <li>Issue Tracker: GitHub Issues</li> <li>Discussions: GitHub Discussions</li> </ul>"},{"location":"about/changelog/","title":"Changelog","text":"<p>All notable changes to MCP DevBench are documented here.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"about/changelog/#100-2024-01-15","title":"[1.0.0] - 2024-01-15","text":""},{"location":"about/changelog/#added","title":"Added","text":"<ul> <li>Initial release</li> <li>Container lifecycle management</li> <li>Command execution with streaming output</li> <li>Filesystem operations with ETag support</li> <li>Security features (read-only rootfs, capability dropping)</li> <li>Audit logging</li> <li>Prometheus metrics</li> <li>Multiple transport modes (stdio, SSE, HTTP)</li> <li>Authentication (bearer, OIDC)</li> <li>Warm container pool</li> <li>Automatic cleanup</li> </ul> <p>See GitHub Releases for full changelog.</p>"},{"location":"about/license/","title":"License","text":"<p>MCP DevBench is licensed under the MIT License.</p>"},{"location":"about/license/#mit-license","title":"MIT License","text":"<pre><code>Copyright (c) 2024 MCP DevBench Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"about/license/#third-party-licenses","title":"Third-Party Licenses","text":"<p>MCP DevBench uses the following open-source libraries:</p> <ul> <li>FastMCP - MIT License</li> <li>Pydantic - MIT License</li> <li>SQLAlchemy - MIT License</li> <li>Docker SDK - Apache License 2.0</li> </ul> <p>See LICENSE file for details.</p>"},{"location":"about/roadmap/","title":"Roadmap","text":"<p>Future plans for MCP DevBench.</p>"},{"location":"about/roadmap/#current-version-100","title":"Current Version: 1.0.0","text":""},{"location":"about/roadmap/#planned-features","title":"Planned Features","text":""},{"location":"about/roadmap/#v11-q1-2025","title":"v1.1 (Q1 2025)","text":"<ul> <li>[ ] Image vulnerability scanning (Trivy)</li> <li>[ ] Network policies</li> <li>[ ] Container snapshots</li> <li>[ ] Resource monitoring dashboard</li> </ul>"},{"location":"about/roadmap/#v12-q2-2025","title":"v1.2 (Q2 2025)","text":"<ul> <li>[ ] PostgreSQL support</li> <li>[ ] Multi-instance deployment</li> <li>[ ] Advanced security policies</li> <li>[ ] Performance improvements</li> </ul>"},{"location":"about/roadmap/#v20-q3-2025","title":"v2.0 (Q3 2025)","text":"<ul> <li>[ ] Kubernetes runtime support</li> <li>[ ] Distributed locking</li> <li>[ ] Multi-tenancy</li> <li>[ ] Advanced observability</li> </ul>"},{"location":"about/roadmap/#completed","title":"Completed","text":""},{"location":"about/roadmap/#v10-2024-01-15","title":"v1.0 (2024-01-15)","text":"<ul> <li>[x] Container management</li> <li>[x] Command execution</li> <li>[x] Filesystem operations</li> <li>[x] Security features</li> <li>[x] Audit logging</li> <li>[x] Metrics</li> <li>[x] Authentication</li> </ul> <p>See IMPLEMENTATION_ROADMAP.md for detailed roadmap.</p>"},{"location":"api/authentication/","title":"Authentication","text":"<p>MCP DevBench supports multiple authentication modes for different deployment scenarios.</p>"},{"location":"api/authentication/#authentication-modes","title":"Authentication Modes","text":""},{"location":"api/authentication/#none-development-only","title":"None (Development Only)","text":"<p>No authentication required:</p> <pre><code>MCP_AUTH_MODE=none\n</code></pre> <p>Use cases: - Local development - Testing - Trusted environments</p> <p>\u26a0\ufe0f WARNING: Never use in production!</p>"},{"location":"api/authentication/#bearer-token","title":"Bearer Token","text":"<p>Simple token-based authentication:</p> <pre><code>MCP_AUTH_MODE=bearer\nMCP_AUTH_BEARER_TOKEN=your-secret-token-here\n</code></pre> <p>Client usage: <pre><code>client = Client(\n    ...,\n    headers={\"Authorization\": \"Bearer your-secret-token-here\"}\n)\n</code></pre></p> <p>Best practices: - Use strong tokens (32+ bytes) - Rotate regularly - Store in secrets manager - Use HTTPS in production</p>"},{"location":"api/authentication/#oidc-openid-connect","title":"OIDC (OpenID Connect)","text":"<p>OAuth 2.0 / OIDC authentication:</p> <pre><code>MCP_AUTH_MODE=oidc\nMCP_OAUTH_CONFIG_URL=https://auth.example.com/.well-known/openid-configuration\nMCP_OAUTH_CLIENT_ID=mcp-devbench\nMCP_OAUTH_CLIENT_SECRET=client-secret\n</code></pre> <p>Client usage: <pre><code># Get access token from OIDC provider\naccess_token = get_oidc_token(...)\n\n# Use in client\nclient = Client(\n    ...,\n    headers={\"Authorization\": f\"Bearer {access_token}\"}\n)\n</code></pre></p> <p>Supported providers: - Auth0 - Okta - Azure AD - Google - Keycloak - Any OIDC-compliant provider</p>"},{"location":"api/authentication/#http-authentication","title":"HTTP Authentication","text":"<p>For HTTP transport mode, include authentication in headers:</p> <pre><code>curl -H \"Authorization: Bearer your-token\" \\\n  http://localhost:8000/api/tools/call\n</code></pre>"},{"location":"api/authentication/#stdio-authentication","title":"Stdio Authentication","text":"<p>For stdio mode, authentication happens at process level:</p> <pre><code># Run server with restricted permissions\nsudo -u mcp-user python -m mcp_devbench.server\n</code></pre>"},{"location":"api/authentication/#error-responses","title":"Error Responses","text":"<p>401 Unauthorized: <pre><code>{\n  \"error\": {\n    \"code\": -32000,\n    \"message\": \"Authentication required\"\n  }\n}\n</code></pre></p> <p>403 Forbidden: <pre><code>{\n  \"error\": {\n    \"code\": -32000,\n    \"message\": \"Insufficient permissions\"\n  }\n}\n</code></pre></p>"},{"location":"api/authentication/#next-steps","title":"Next Steps","text":"<ul> <li>API Overview - API documentation</li> <li>Security Guide - Security best practices</li> </ul>"},{"location":"api/errors/","title":"Error Handling","text":"<p>Complete reference for error codes and handling in MCP DevBench.</p>"},{"location":"api/errors/#error-format","title":"Error Format","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"request-1\",\n  \"error\": {\n    \"code\": -32000,\n    \"message\": \"Human-readable error message\",\n    \"data\": {\n      \"additional\": \"context\"\n    }\n  }\n}\n</code></pre>"},{"location":"api/errors/#error-codes","title":"Error Codes","text":""},{"location":"api/errors/#json-rpc-errors","title":"JSON-RPC Errors","text":"Code Name Description -32700 Parse Error Invalid JSON -32600 Invalid Request Missing required fields -32601 Method Not Found Unknown tool name -32602 Invalid Params Invalid tool parameters -32603 Internal Error Server error"},{"location":"api/errors/#application-errors","title":"Application Errors","text":"Code Error Description -32000 Server Error Generic server error -32001 Container Not Found Container doesn't exist -32002 Image Not Allowed Image not in allow-list -32003 Execution Timeout Command timed out -32004 Path Security Error Path outside workspace -32005 File Not Found File doesn't exist -32006 Concurrent Limit Exceeded Too many concurrent operations -32007 Authentication Required Not authenticated -32008 Authorization Failed Insufficient permissions -32009 Resource Exhausted Out of resources -32010 Conflict ETag mismatch or conflict"},{"location":"api/errors/#error-handling-examples","title":"Error Handling Examples","text":""},{"location":"api/errors/#python","title":"Python","text":"<pre><code>from mcp import Client, MCPError\n\ntry:\n    result = await client.call_tool(\"spawn\", {\"image\": \"unknown:latest\"})\nexcept MCPError as e:\n    if e.code == -32002:\n        print(f\"Image not allowed: {e.message}\")\n    elif e.code == -32001:\n        print(f\"Container not found: {e.message}\")\n    else:\n        print(f\"Unexpected error: {e}\")\n</code></pre>"},{"location":"api/errors/#javascripttypescript","title":"JavaScript/TypeScript","text":"<pre><code>try {\n  const result = await client.callTool('spawn', {\n    image: 'unknown:latest'\n  });\n} catch (error) {\n  if (error.code === -32002) {\n    console.error('Image not allowed:', error.message);\n  } else {\n    console.error('Error:', error);\n  }\n}\n</code></pre>"},{"location":"api/errors/#retry-strategies","title":"Retry Strategies","text":""},{"location":"api/errors/#exponential-backoff","title":"Exponential Backoff","text":"<pre><code>import asyncio\nfrom tenacity import retry, stop_after_attempt, wait_exponential\n\n@retry(\n    stop=stop_after_attempt(3),\n    wait=wait_exponential(multiplier=1, min=4, max=10),\n    retry=retry_if_exception_type(MCPError)\n)\nasync def resilient_call():\n    return await client.call_tool(...)\n</code></pre>"},{"location":"api/errors/#conditional-retry","title":"Conditional Retry","text":"<pre><code>def should_retry(exception):\n    # Retry only on specific errors\n    return exception.code in [-32603, -32009]\n\n@retry(\n    stop=stop_after_attempt(3),\n    retry=retry_if_exception(should_retry)\n)\nasync def smart_retry():\n    return await client.call_tool(...)\n</code></pre>"},{"location":"api/errors/#next-steps","title":"Next Steps","text":"<ul> <li>API Overview - API documentation</li> <li>MCP Tools - Tool reference</li> <li>Troubleshooting - Debugging guide</li> </ul>"},{"location":"api/overview/","title":"API Overview","text":"<p>This document provides an overview of the MCP DevBench API.</p>"},{"location":"api/overview/#api-architecture","title":"API Architecture","text":"<p>MCP DevBench implements the Model Context Protocol (MCP) specification, providing a standardized way for AI assistants to interact with Docker containers.</p> <pre><code>graph LR\n    A[AI Assistant] --&gt;|MCP Protocol| B[MCP DevBench Server]\n    B --&gt;|Docker API| C[Docker Daemon]\n    B --&gt;|SQLite| D[(Database)]\n    C --&gt; E[Containers]</code></pre>"},{"location":"api/overview/#protocol-versions","title":"Protocol Versions","text":"<ul> <li>MCP Version: 1.0</li> <li>API Version: 1.0.0</li> </ul>"},{"location":"api/overview/#transport-modes","title":"Transport Modes","text":"<p>MCP DevBench supports three transport modes:</p>"},{"location":"api/overview/#stdio-default","title":"stdio (Default)","text":"<p>Standard input/output transport for MCP clients:</p> <pre><code>uv run python -m mcp_devbench.server\n</code></pre> <p>Use cases: - Local development - MCP client applications - Direct integration</p>"},{"location":"api/overview/#sse-server-sent-events","title":"SSE (Server-Sent Events)","text":"<p>HTTP-based server-sent events:</p> <pre><code>export MCP_TRANSPORT_MODE=sse\nexport MCP_HOST=0.0.0.0\nexport MCP_PORT=8000\nuv run python -m mcp_devbench.server\n</code></pre> <p>Use cases: - Web applications - Browser-based clients - Real-time updates</p>"},{"location":"api/overview/#http-streamable","title":"HTTP (Streamable)","text":"<p>Full HTTP transport with streaming support:</p> <pre><code>export MCP_TRANSPORT_MODE=streamable-http\nexport MCP_HOST=0.0.0.0\nexport MCP_PORT=8000\nuv run python -m mcp_devbench.server\n</code></pre> <p>Use cases: - Production deployments - REST-like access - Load balancing</p>"},{"location":"api/overview/#api-components","title":"API Components","text":""},{"location":"api/overview/#tools","title":"Tools","text":"<p>MCP tools are the primary API methods:</p> Tool Category Purpose <code>spawn</code> Container Create a new container <code>attach</code> Container Attach client to container <code>kill</code> Container Stop and remove container <code>list</code> Container List all containers <code>exec_start</code> Execution Start command execution <code>exec_poll</code> Execution Poll for command output <code>exec_signal</code> Execution Send signal to execution <code>fs_read</code> Filesystem Read file contents <code>fs_write</code> Filesystem Write file contents <code>fs_delete</code> Filesystem Delete file or directory <code>fs_list</code> Filesystem List directory contents <p>See MCP Tools Reference for detailed documentation.</p>"},{"location":"api/overview/#resources","title":"Resources","text":"<p>MCP resources provide read access to container data:</p> <ul> <li><code>workspace://{container_id}/</code> - Container workspace root</li> <li><code>logs://{container_id}/</code> - Container logs</li> <li><code>stats://{container_id}</code> - Container statistics</li> </ul>"},{"location":"api/overview/#prompts","title":"Prompts","text":"<p>Pre-defined workflows:</p> <ul> <li><code>setup_python</code> - Setup Python development environment</li> <li><code>setup_node</code> - Setup Node.js development environment</li> <li><code>run_tests</code> - Run test suite</li> </ul>"},{"location":"api/overview/#requestresponse-format","title":"Request/Response Format","text":""},{"location":"api/overview/#request","title":"Request","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"request-1\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"spawn\",\n    \"arguments\": {\n      \"image\": \"python:3.11-slim\",\n      \"persistent\": false\n    }\n  }\n}\n</code></pre>"},{"location":"api/overview/#response","title":"Response","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"request-1\",\n  \"result\": {\n    \"container_id\": \"c_abc123...\",\n    \"status\": \"running\",\n    \"alias\": null\n  }\n}\n</code></pre>"},{"location":"api/overview/#error-response","title":"Error Response","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"request-1\",\n  \"error\": {\n    \"code\": -32000,\n    \"message\": \"Image not allowed\",\n    \"data\": {\n      \"image\": \"malicious:latest\",\n      \"allowed_images\": [\"python:3.11-slim\", \"node:18-slim\"]\n    }\n  }\n}\n</code></pre>"},{"location":"api/overview/#data-types","title":"Data Types","text":""},{"location":"api/overview/#container-id","title":"Container ID","text":"<p>Opaque identifier for containers:</p> <pre><code>Format: c_{uuid}\nExample: c_123e4567-e89b-12d3-a456-426614174000\n</code></pre>"},{"location":"api/overview/#execution-id","title":"Execution ID","text":"<p>Opaque identifier for command executions:</p> <pre><code>Format: e_{uuid}\nExample: e_987fcdeb-51a2-43f9-b345-98765432100\n</code></pre>"},{"location":"api/overview/#timestamps","title":"Timestamps","text":"<p>ISO 8601 format with timezone:</p> <pre><code>Example: 2024-01-15T10:30:00.123Z\n</code></pre>"},{"location":"api/overview/#file-paths","title":"File Paths","text":"<p>Absolute paths within workspace:</p> <pre><code>Valid: /workspace/file.txt\nValid: /workspace/subdir/file.txt\nInvalid: /etc/passwd\nInvalid: ../../../etc/passwd\n</code></pre>"},{"location":"api/overview/#rate-limiting","title":"Rate Limiting","text":"<p>No rate limiting by default. For production deployments, use a reverse proxy:</p> <pre><code>limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;\n\nlocation / {\n    limit_req zone=api burst=20 nodelay;\n    proxy_pass http://mcp-devbench:8000;\n}\n</code></pre>"},{"location":"api/overview/#pagination","title":"Pagination","text":"<p>For operations returning lists:</p> <pre><code>{\n  \"page\": 1,\n  \"per_page\": 50,\n  \"total\": 123\n}\n</code></pre>"},{"location":"api/overview/#versioning","title":"Versioning","text":"<p>API version is included in server capabilities:</p> <pre><code>{\n  \"protocolVersion\": \"1.0\",\n  \"capabilities\": {\n    \"tools\": {},\n    \"resources\": {},\n    \"prompts\": {}\n  },\n  \"serverInfo\": {\n    \"name\": \"mcp-devbench\",\n    \"version\": \"1.0.0\"\n  }\n}\n</code></pre>"},{"location":"api/overview/#status-codes","title":"Status Codes","text":"<p>HTTP status codes (HTTP transport only):</p> Code Meaning 200 Success 400 Bad Request 401 Unauthorized 403 Forbidden 404 Not Found 429 Too Many Requests 500 Internal Server Error 503 Service Unavailable"},{"location":"api/overview/#cors","title":"CORS","text":"<p>CORS headers for browser access:</p> <pre><code>MCP_CORS_ENABLED=true\nMCP_CORS_ORIGINS=https://example.com,https://app.example.com\n</code></pre>"},{"location":"api/overview/#websocket-support","title":"WebSocket Support","text":"<p>WebSocket upgrade for real-time communication (planned):</p> <pre><code>const ws = new WebSocket('ws://localhost:8000/ws');\nws.onmessage = (event) =&gt; {\n  const message = JSON.parse(event.data);\n  console.log('Received:', message);\n};\n</code></pre>"},{"location":"api/overview/#client-libraries","title":"Client Libraries","text":""},{"location":"api/overview/#python","title":"Python","text":"<pre><code>from mcp import Client\n\nasync with Client(\"python -m mcp_devbench.server\") as client:\n    result = await client.call_tool(\"spawn\", {\n        \"image\": \"python:3.11-slim\"\n    })\n    print(result)\n</code></pre>"},{"location":"api/overview/#javascripttypescript","title":"JavaScript/TypeScript","text":"<pre><code>import { Client } from '@modelcontextprotocol/sdk';\n\nconst client = new Client({\n  command: 'python',\n  args: ['-m', 'mcp_devbench.server']\n});\n\nawait client.connect();\nconst result = await client.callTool('spawn', {\n  image: 'python:3.11-slim'\n});\n</code></pre>"},{"location":"api/overview/#best-practices","title":"Best Practices","text":""},{"location":"api/overview/#idempotency","title":"Idempotency","text":"<p>Use idempotency keys for operations that create resources:</p> <pre><code>{\n  \"image\": \"python:3.11-slim\",\n  \"idempotency_key\": \"unique-key-123\"\n}\n</code></pre>"},{"location":"api/overview/#error-handling","title":"Error Handling","text":"<p>Always handle errors gracefully:</p> <pre><code>try:\n    result = await client.call_tool(\"spawn\", {...})\nexcept MCPError as e:\n    if e.code == -32000:  # Application error\n        print(f\"Error: {e.message}\")\n    elif e.code == -32601:  # Method not found\n        print(\"Tool not supported\")\n    else:\n        raise\n</code></pre>"},{"location":"api/overview/#timeouts","title":"Timeouts","text":"<p>Set appropriate timeouts:</p> <pre><code># Short operations\nawait client.call_tool(\"fs_read\", {...}, timeout=30)\n\n# Long operations\nawait client.call_tool(\"exec_start\", {...}, timeout=300)\n</code></pre>"},{"location":"api/overview/#retries","title":"Retries","text":"<p>Implement exponential backoff for retries:</p> <pre><code>import asyncio\nfrom tenacity import retry, stop_after_attempt, wait_exponential\n\n@retry(\n    stop=stop_after_attempt(3),\n    wait=wait_exponential(multiplier=1, min=4, max=10)\n)\nasync def spawn_with_retry(...):\n    return await client.call_tool(\"spawn\", ...)\n</code></pre>"},{"location":"api/overview/#performance","title":"Performance","text":""},{"location":"api/overview/#warm-pool","title":"Warm Pool","text":"<p>Enable warm container pool for faster provisioning:</p> <pre><code>MCP_WARM_POOL_ENABLED=true\nMCP_WARM_POOL_SIZE=5\n</code></pre>"},{"location":"api/overview/#connection-pooling","title":"Connection Pooling","text":"<p>Reuse client connections:</p> <pre><code># \u2705 Good - Reuse client\nclient = Client(...)\nawait client.connect()\n\nfor i in range(10):\n    await client.call_tool(...)\n\nawait client.disconnect()\n\n# \u274c Bad - New client each time\nfor i in range(10):\n    async with Client(...) as client:\n        await client.call_tool(...)\n</code></pre>"},{"location":"api/overview/#batching","title":"Batching","text":"<p>Batch operations when possible:</p> <pre><code># Execute multiple operations\nasync with asyncio.TaskGroup() as group:\n    task1 = group.create_task(client.call_tool(\"fs_read\", {...}))\n    task2 = group.create_task(client.call_tool(\"fs_read\", {...}))\n    task3 = group.create_task(client.call_tool(\"fs_read\", {...}))\n\nresults = [task1.result(), task2.result(), task3.result()]\n</code></pre>"},{"location":"api/overview/#next-steps","title":"Next Steps","text":"<ul> <li>MCP Tools Reference - Detailed tool documentation</li> <li>Authentication - Authentication methods</li> <li>Error Handling - Error codes and handling</li> <li>Security - Security best practices</li> </ul>"},{"location":"api/tools/","title":"MCP Tools Reference","text":"<p>Complete reference for all MCP tools available in MCP DevBench.</p>"},{"location":"api/tools/#container-management-tools","title":"Container Management Tools","text":""},{"location":"api/tools/#spawn","title":"spawn","text":"<p>Create a new Docker container.</p> <p>Input: <pre><code>{\n  \"image\": \"python:3.11-slim\",\n  \"persistent\": false,\n  \"alias\": \"my-workspace\",\n  \"ttl_s\": 3600,\n  \"idempotency_key\": \"optional-key\"\n}\n</code></pre></p> <p>Output: <pre><code>{\n  \"container_id\": \"c_abc123...\",\n  \"alias\": \"my-workspace\",\n  \"status\": \"running\"\n}\n</code></pre></p> <p>Parameters: - <code>image</code> (required) - Docker image reference - <code>persistent</code> (optional) - Whether container persists across restarts (default: false) - <code>alias</code> (optional) - User-friendly name for the container - <code>ttl_s</code> (optional) - Time-to-live in seconds - <code>idempotency_key</code> (optional) - Key to prevent duplicate creation</p>"},{"location":"api/tools/#attach","title":"attach","text":"<p>Attach client session to a container.</p> <p>Input: <pre><code>{\n  \"target\": \"my-workspace\",\n  \"client_name\": \"claude\",\n  \"session_id\": \"unique-session-id\"\n}\n</code></pre></p> <p>Output: <pre><code>{\n  \"container_id\": \"c_abc123...\",\n  \"alias\": \"my-workspace\",\n  \"roots\": [\"workspace:c_abc123...\"]\n}\n</code></pre></p>"},{"location":"api/tools/#kill","title":"kill","text":"<p>Stop and remove a container.</p> <p>Input: <pre><code>{\n  \"container_id\": \"c_abc123...\",\n  \"force\": true\n}\n</code></pre></p> <p>Output: <pre><code>{\n  \"status\": \"stopped\"\n}\n</code></pre></p>"},{"location":"api/tools/#list","title":"list","text":"<p>List all containers.</p> <p>Input: <pre><code>{\n  \"include_stopped\": false\n}\n</code></pre></p> <p>Output: <pre><code>{\n  \"containers\": [\n    {\n      \"container_id\": \"c_abc123...\",\n      \"alias\": \"my-workspace\",\n      \"image\": \"python:3.11-slim\",\n      \"status\": \"running\",\n      \"created_at\": \"2024-01-15T10:30:00Z\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"api/tools/#execution-tools","title":"Execution Tools","text":""},{"location":"api/tools/#exec_start","title":"exec_start","text":"<p>Start command execution in a container.</p> <p>Input: <pre><code>{\n  \"container_id\": \"c_abc123...\",\n  \"cmd\": [\"python\", \"script.py\"],\n  \"cwd\": \"/workspace\",\n  \"env\": {\"DEBUG\": \"true\"},\n  \"timeout_s\": 300\n}\n</code></pre></p> <p>Output: <pre><code>{\n  \"exec_id\": \"e_xyz789...\",\n  \"status\": \"running\"\n}\n</code></pre></p>"},{"location":"api/tools/#exec_poll","title":"exec_poll","text":"<p>Poll for command execution output.</p> <p>Input: <pre><code>{\n  \"exec_id\": \"e_xyz789...\",\n  \"after_seq\": 0\n}\n</code></pre></p> <p>Output: <pre><code>{\n  \"messages\": [\n    {\n      \"seq\": 1,\n      \"stream\": \"stdout\",\n      \"data\": \"Hello, World!\\n\",\n      \"timestamp\": \"2024-01-15T10:30:01Z\"\n    }\n  ],\n  \"complete\": false,\n  \"exit_code\": null\n}\n</code></pre></p>"},{"location":"api/tools/#exec_signal","title":"exec_signal","text":"<p>Send signal to running execution.</p> <p>Input: <pre><code>{\n  \"exec_id\": \"e_xyz789...\",\n  \"signal\": \"SIGTERM\"\n}\n</code></pre></p> <p>Output: <pre><code>{\n  \"status\": \"signaled\"\n}\n</code></pre></p>"},{"location":"api/tools/#filesystem-tools","title":"Filesystem Tools","text":""},{"location":"api/tools/#fs_read","title":"fs_read","text":"<p>Read file contents from container.</p> <p>Input: <pre><code>{\n  \"container_id\": \"c_abc123...\",\n  \"path\": \"/workspace/file.txt\"\n}\n</code></pre></p> <p>Output: <pre><code>{\n  \"content\": \"file contents\",\n  \"size\": 13,\n  \"etag\": \"abc123def456\",\n  \"mtime\": \"2024-01-15T10:30:00Z\"\n}\n</code></pre></p>"},{"location":"api/tools/#fs_write","title":"fs_write","text":"<p>Write file contents to container.</p> <p>Input: <pre><code>{\n  \"container_id\": \"c_abc123...\",\n  \"path\": \"/workspace/file.txt\",\n  \"content\": \"new contents\",\n  \"mode\": 420,\n  \"create_parents\": true,\n  \"if_match\": \"abc123def456\"\n}\n</code></pre></p> <p>Output: <pre><code>{\n  \"size\": 12,\n  \"etag\": \"new123abc456\"\n}\n</code></pre></p>"},{"location":"api/tools/#fs_delete","title":"fs_delete","text":"<p>Delete file or directory from container.</p> <p>Input: <pre><code>{\n  \"container_id\": \"c_abc123...\",\n  \"path\": \"/workspace/temp\",\n  \"recursive\": true\n}\n</code></pre></p> <p>Output: <pre><code>{\n  \"status\": \"deleted\",\n  \"path\": \"/workspace/temp\"\n}\n</code></pre></p>"},{"location":"api/tools/#fs_list","title":"fs_list","text":"<p>List directory contents in container.</p> <p>Input: <pre><code>{\n  \"container_id\": \"c_abc123...\",\n  \"path\": \"/workspace\",\n  \"recursive\": false\n}\n</code></pre></p> <p>Output: <pre><code>{\n  \"entries\": [\n    {\n      \"path\": \"/workspace/file.txt\",\n      \"type\": \"file\",\n      \"size\": 1234,\n      \"mtime\": \"2024-01-15T10:30:00Z\",\n      \"mode\": 420\n    }\n  ]\n}\n</code></pre></p>"},{"location":"api/tools/#error-responses","title":"Error Responses","text":"<p>All tools may return errors in this format:</p> <pre><code>{\n  \"error\": {\n    \"code\": -32000,\n    \"message\": \"Error description\",\n    \"data\": {\n      \"details\": \"Additional error information\"\n    }\n  }\n}\n</code></pre> <p>See Error Handling for complete error code reference.</p>"},{"location":"api/tools/#next-steps","title":"Next Steps","text":"<ul> <li>API Overview - API architecture</li> <li>Authentication - Authentication methods</li> <li>Error Handling - Error codes</li> </ul>"},{"location":"development/architecture/","title":"Architecture","text":"<p>MCP DevBench architecture overview.</p>"},{"location":"development/architecture/#system-architecture","title":"System Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  MCP Client  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502 MCP Protocol\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  FastMCP Server   \u2502\n\u2502  (Auth, Routing)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n    \u250c\u2500\u2500\u2534\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502     \u2502      \u2502        \u2502\n\u250c\u2500\u2500\u2500\u25bc\u2500\u2500\u2510 \u250c\u25bc\u2500\u2510 \u250c\u2500\u25bc\u2500\u2500\u2510 \u250c\u2500\u2500\u25bc\u2500\u2500\u2500\u2510\n\u2502 Cont \u2502 \u2502Ex\u2502 \u2502 FS \u2502 \u2502 Img  \u2502\n\u2502 Mgr  \u2502 \u2502ec\u2502 \u2502Mgr \u2502 \u2502Policy\u2502\n\u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2518 \u2514\u252c\u2500\u2518 \u2514\u2500\u252c\u2500\u2500\u2518 \u2514\u2500\u2500\u252c\u2500\u2500\u2500\u2518\n    \u2502     \u2502     \u2502       \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n            \u2502\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502 Docker Daemon \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"development/architecture/#components","title":"Components","text":""},{"location":"development/architecture/#managers","title":"Managers","text":"<ul> <li>ContainerManager - Container lifecycle</li> <li>ExecManager - Command execution</li> <li>FilesystemManager - File operations</li> <li>ImagePolicyManager - Image validation</li> <li>SecurityManager - Security policies</li> </ul>"},{"location":"development/architecture/#repositories","title":"Repositories","text":"<ul> <li>ContainerRepository - Container data access</li> <li>ExecRepository - Execution data access</li> <li>AttachmentRepository - Attachment data access</li> </ul>"},{"location":"development/architecture/#utilities","title":"Utilities","text":"<ul> <li>AuditLogger - Audit trail</li> <li>MetricsCollector - Prometheus metrics</li> <li>DockerClient - Docker API wrapper</li> </ul>"},{"location":"development/architecture/#design-patterns","title":"Design Patterns","text":"<ul> <li>Repository Pattern - Data access abstraction</li> <li>Manager Pattern - Business logic</li> <li>Dependency Injection - Loose coupling</li> <li>Factory Pattern - Object creation</li> </ul>"},{"location":"development/architecture/#next-steps","title":"Next Steps","text":"<ul> <li>Project Style</li> <li>Testing</li> </ul>"},{"location":"development/contributing/","title":"Contributing","text":"<p>Thank you for contributing to MCP DevBench!</p>"},{"location":"development/contributing/#quick-start","title":"Quick Start","text":"<pre><code># Clone repository\ngit clone https://github.com/pvliesdonk/mcp-devbench.git\ncd mcp-devbench\n\n# Install dependencies\npip install uv\nuv sync --extra dev\n\n# Install pre-commit hooks\nuv run pre-commit install\n\n# Run tests\nuv run pytest\n</code></pre>"},{"location":"development/contributing/#development-workflow","title":"Development Workflow","text":"<ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Make your changes</li> <li>Write tests</li> <li>Run quality checks</li> <li>Submit a pull request</li> </ol>"},{"location":"development/contributing/#code-quality","title":"Code Quality","text":"<pre><code># Format code\nuv run ruff format .\n\n# Lint code\nuv run ruff check .\n\n# Type check\nuv run pyright src/\n\n# Run tests\nuv run pytest --cov\n</code></pre>"},{"location":"development/contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<ul> <li>Write clear commit messages</li> <li>Add tests for new features</li> <li>Update documentation</li> <li>Ensure CI passes</li> </ul> <p>See CONTRIBUTING.md for details.</p>"},{"location":"development/project-style/","title":"Project Style Guide","text":""},{"location":"development/project-style/#package-management","title":"Package Management","text":"<p>Standard: uv (not pip)</p> <p>MCP DevBench uses uv as the standard package manager.</p> <p>\u2705 Do: <pre><code># Install dependencies\nuv sync\n\n# Add a dependency\nuv add requests\n\n# Add a dev dependency\nuv add --dev pytest\n\n# Run commands in the virtual environment\nuv run pytest\nuv run python -m mcp_devbench.server\n\n# Install the project in development mode\nuv pip install -e .\n</code></pre></p> <p>\u274c Don't: <pre><code># Avoid using pip directly\npip install -r requirements.txt  # Don't do this\npip install requests             # Don't do this\npython -m pytest                 # Use 'uv run pytest' instead\n</code></pre></p> <p>Why uv? - 10-100x faster than pip for dependency resolution - Built-in lock file for reproducible installs - Compatible with pip - uses standard pyproject.toml - Better caching and parallel downloads - Active development by Astral (creators of ruff)</p>"},{"location":"development/project-style/#virtual-environment","title":"Virtual Environment","text":"<p>uv automatically manages the virtual environment in <code>.venv/</code>. You don't need to manually create or activate it.</p> <pre><code># uv automatically uses .venv/\nuv run python --version\n\n# If you need to activate manually (rare):\nsource .venv/bin/activate  # Unix\n.venv\\Scripts\\activate     # Windows\n</code></pre>"},{"location":"development/project-style/#dependencies","title":"Dependencies","text":"<p>Adding Dependencies:</p> <ol> <li> <p>Runtime dependencies go in <code>pyproject.toml</code> under <code>[project.dependencies]</code>:    <pre><code>uv add fastmcp pydantic docker\n</code></pre></p> </li> <li> <p>Development dependencies go in <code>[project.optional-dependencies.dev]</code>:    <pre><code>uv add --dev pytest ruff pyright\n</code></pre></p> </li> <li> <p>Always commit <code>uv.lock</code> - This ensures reproducible builds across all environments.</p> </li> </ol> <p>Updating Dependencies:</p> <pre><code># Update all dependencies\nuv sync --upgrade\n\n# Update specific package\nuv add requests@latest\n</code></pre>"},{"location":"development/project-style/#code-style","title":"Code Style","text":"<p>Linting and Formatting: ruff</p> <pre><code># Check code style\nuv run ruff check .\n\n# Auto-fix issues\nuv run ruff check . --fix\n\n# Format code\nuv run ruff format .\n</code></pre> <p>Type Checking: pyright</p> <pre><code># Run type checker\nuv run pyright src/\n\n# Type check specific file\nuv run pyright src/mcp_devbench/server.py\n</code></pre> <p>Pre-commit Hooks:</p> <p>Set up pre-commit hooks to automatically check code before committing:</p> <pre><code># Install pre-commit hooks\nuv run pre-commit install\n\n# Manually run on all files\nuv run pre-commit run --all-files\n</code></pre>"},{"location":"development/project-style/#testing","title":"Testing","text":"<p>Running Tests:</p> <pre><code># Run all tests\nuv run pytest\n\n# Run with coverage\nuv run pytest --cov=mcp_devbench --cov-report=html\n\n# Run specific test file\nuv run pytest tests/unit/test_container_manager.py\n\n# Run with specific markers\nuv run pytest -m \"not e2e\"  # Skip E2E tests\nuv run pytest -m integration  # Only integration tests\n</code></pre>"},{"location":"development/project-style/#import-organization","title":"Import Organization","text":"<p>Order: 1. Standard library imports 2. Third-party imports 3. Local application imports</p> <pre><code># Good\nimport asyncio\nimport json\nfrom datetime import datetime\n\nfrom docker import DockerClient\nfrom pydantic import BaseModel\n\nfrom mcp_devbench.config import get_settings\nfrom mcp_devbench.utils import get_logger\n</code></pre> <p>Avoid star imports:</p> <pre><code># \u274c Bad\nfrom mcp_devbench.models import *\n\n# \u2705 Good\nfrom mcp_devbench.models import Container, Exec, Attachment\n</code></pre>"},{"location":"development/project-style/#async-conventions","title":"Async Conventions","text":"<p>Always use async for I/O operations:</p> <pre><code># \u2705 Good\nasync def read_file(path: str) -&gt; bytes:\n    return await asyncio.to_thread(lambda: open(path, 'rb').read())\n\n# \u274c Bad\ndef read_file(path: str) -&gt; bytes:\n    return open(path, 'rb').read()  # Blocks event loop!\n</code></pre> <p>Use type hints everywhere:</p> <pre><code># \u2705 Good\nasync def create_container(\n    image: str,\n    alias: str | None = None,\n    persistent: bool = False,\n) -&gt; Container:\n    ...\n\n# \u274c Bad\nasync def create_container(image, alias=None, persistent=False):\n    ...\n</code></pre>"},{"location":"development/project-style/#error-handling","title":"Error Handling","text":"<p>Use specific exceptions:</p> <pre><code># \u2705 Good\nfrom mcp_devbench.utils.exceptions import ContainerNotFoundError\n\nif not container:\n    raise ContainerNotFoundError(f\"Container {container_id} not found\")\n\n# \u274c Bad\nif not container:\n    raise Exception(\"Container not found\")\n</code></pre>"},{"location":"development/project-style/#logging","title":"Logging","text":"<p>Use structured logging:</p> <pre><code># \u2705 Good\nlogger.info(\n    \"Container created\",\n    extra={\n        \"container_id\": container.id,\n        \"image\": container.image,\n    }\n)\n\n# \u274c Bad\nlogger.info(f\"Container {container.id} created with image {container.image}\")\n</code></pre>"},{"location":"development/project-style/#commit-messages","title":"Commit Messages","text":"<p>Use Conventional Commits:</p> <pre><code># Format: &lt;type&gt;(&lt;scope&gt;): &lt;description&gt;\n\nfeat(exec): add idempotency support for command execution\nfix(fs): resolve race condition in concurrent writes\ndocs(api): add OpenAPI specification\nrefactor(db): optimize connection pooling\ntest(e2e): add full workflow integration tests\nchore(deps): update dependencies\n</code></pre> <p>Types: - <code>feat</code>: New feature - <code>fix</code>: Bug fix - <code>docs</code>: Documentation changes - <code>refactor</code>: Code refactoring - <code>test</code>: Adding or updating tests - <code>chore</code>: Maintenance tasks - <code>perf</code>: Performance improvements - <code>ci</code>: CI/CD changes</p>"},{"location":"development/project-style/#documentation","title":"Documentation","text":"<p>Docstrings:</p> <p>Use Google-style docstrings:</p> <pre><code>async def create_container(\n    image: str,\n    alias: str | None = None,\n    persistent: bool = False,\n) -&gt; Container:\n    \"\"\"Create a new Docker container.\n\n    Args:\n        image: Docker image reference (e.g., \"python:3.11-slim\")\n        alias: Optional user-friendly name for the container\n        persistent: Whether container should persist across restarts\n\n    Returns:\n        Created container instance\n\n    Raises:\n        ContainerAlreadyExistsError: If alias already exists\n        ImagePolicyError: If image is not allowed\n        DockerAPIError: If Docker operations fail\n    \"\"\"\n    ...\n</code></pre>"},{"location":"development/project-style/#cicd","title":"CI/CD","text":"<p>All checks must pass before merging:</p> <ol> <li>\u2705 Tests pass (<code>uv run pytest</code>)</li> <li>\u2705 Linting passes (<code>uv run ruff check .</code>)</li> <li>\u2705 Formatting correct (<code>uv run ruff format --check .</code>)</li> <li>\u2705 Type checking passes (<code>uv run pyright src/</code>)</li> <li>\u2705 Security scans pass (Trivy)</li> <li>\u2705 Code coverage &gt;85%</li> </ol>"},{"location":"development/project-style/#summary","title":"Summary","text":"Tool Purpose Command uv Package management <code>uv sync</code>, <code>uv add</code>, <code>uv run</code> ruff Linting + Formatting <code>uv run ruff check .</code>, <code>uv run ruff format .</code> pyright Type checking <code>uv run pyright src/</code> pytest Testing <code>uv run pytest</code> pre-commit Git hooks <code>uv run pre-commit run --all-files</code>"},{"location":"development/releases/","title":"Release Process","text":"<p>MCP DevBench uses semantic versioning and automated releases.</p>"},{"location":"development/releases/#versioning","title":"Versioning","text":"<p>Format: <code>MAJOR.MINOR.PATCH</code></p> <ul> <li>MAJOR: Breaking changes</li> <li>MINOR: New features</li> <li>PATCH: Bug fixes</li> </ul>"},{"location":"development/releases/#release-workflow","title":"Release Workflow","text":"<p>Releases are automated via semantic-release:</p> <ol> <li>Merge PR to main</li> <li>CI runs tests</li> <li>Semantic-release analyzes commits</li> <li>Version bumped</li> <li>CHANGELOG.md updated</li> <li>Git tag created</li> <li>Package published</li> <li>GitHub release created</li> </ol>"},{"location":"development/releases/#commit-messages","title":"Commit Messages","text":"<p>Use Conventional Commits:</p> <pre><code>feat: add container snapshots\nfix: resolve race condition\ndocs: update API documentation\n</code></pre> <p>Types: - <code>feat:</code> - New feature (MINOR bump) - <code>fix:</code> - Bug fix (PATCH bump) - <code>docs:</code> - Documentation - <code>refactor:</code> - Code refactoring - <code>test:</code> - Tests - <code>chore:</code> - Maintenance</p>"},{"location":"development/releases/#breaking-changes","title":"Breaking Changes","text":"<pre><code>feat!: change API response format\n\nBREAKING CHANGE: Response format changed from X to Y\n</code></pre> <p>This triggers a MAJOR version bump.</p>"},{"location":"development/releases/#manual-release","title":"Manual Release","text":"<p>If needed:</p> <pre><code># Bump version\npython-semantic-release version\n\n# Publish\npython-semantic-release publish\n</code></pre>"},{"location":"development/testing/","title":"Testing","text":"<p>Testing guide for MCP DevBench.</p>"},{"location":"development/testing/#running-tests","title":"Running Tests","text":"<pre><code># All tests\nuv run pytest\n\n# With coverage\nuv run pytest --cov=mcp_devbench --cov-report=html\n\n# Specific test\nuv run pytest tests/unit/test_container_manager.py\n\n# By marker\nuv run pytest -m \"not e2e\"\n</code></pre>"},{"location":"development/testing/#test-structure","title":"Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 unit/           # Unit tests\n\u251c\u2500\u2500 integration/    # Integration tests\n\u251c\u2500\u2500 e2e/           # End-to-end tests\n\u2514\u2500\u2500 fixtures/      # Test fixtures\n</code></pre>"},{"location":"development/testing/#writing-tests","title":"Writing Tests","text":"<pre><code>import pytest\nfrom mcp_devbench.managers import ContainerManager\n\n@pytest.mark.asyncio\nasync def test_create_container():\n    manager = ContainerManager()\n    container = await manager.create_container(\n        image=\"python:3.11-slim\"\n    )\n    assert container.image == \"python:3.11-slim\"\n</code></pre>"},{"location":"development/testing/#test-coverage","title":"Test Coverage","text":"<p>Target: &gt;85% coverage</p> <p>Check coverage: <pre><code>uv run pytest --cov --cov-report=term-missing\n</code></pre></p>"},{"location":"development/testing/#next-steps","title":"Next Steps","text":"<ul> <li>Contributing</li> <li>Architecture</li> </ul>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>MCP DevBench is configured entirely through environment variables. This guide covers all available configuration options.</p>"},{"location":"getting-started/configuration/#configuration-files","title":"Configuration Files","text":"<p>MCP DevBench does not use configuration files. All settings are provided via environment variables, which can be set:</p> <ul> <li>Directly in your shell</li> <li>In a <code>.env</code> file (loaded automatically)</li> <li>In Docker Compose or Kubernetes manifests</li> <li>Through your CI/CD system</li> </ul>"},{"location":"getting-started/configuration/#core-settings","title":"Core Settings","text":""},{"location":"getting-started/configuration/#transport-configuration","title":"Transport Configuration","text":"<p>Control how MCP DevBench communicates with clients:</p> <pre><code># Transport mode: stdio, sse, or streamable-http\nMCP_TRANSPORT_MODE=stdio\n\n# Host to bind to (HTTP/SSE modes only)\nMCP_HOST=localhost\n\n# Port to bind to (HTTP/SSE modes only)\nMCP_PORT=8000\n</code></pre> <p>Transport Modes:</p> <ul> <li><code>stdio</code> - Standard input/output (default, best for MCP clients)</li> <li><code>sse</code> - Server-Sent Events over HTTP</li> <li><code>streamable-http</code> - HTTP with streaming support</li> </ul>"},{"location":"getting-started/configuration/#authentication","title":"Authentication","text":"<p>Configure authentication for your deployment:</p> <pre><code># Authentication mode: none, bearer, or oidc\nMCP_AUTH_MODE=none\n\n# Bearer token (when MCP_AUTH_MODE=bearer)\nMCP_AUTH_BEARER_TOKEN=your-secret-token\n\n# OIDC configuration (when MCP_AUTH_MODE=oidc)\nMCP_OAUTH_CONFIG_URL=https://your-oidc-provider/.well-known/openid-configuration\nMCP_OAUTH_CLIENT_ID=your-client-id\nMCP_OAUTH_CLIENT_SECRET=your-client-secret\n</code></pre> <p>Authentication Modes:</p> <ul> <li><code>none</code> - No authentication (development only)</li> <li><code>bearer</code> - Simple bearer token authentication</li> <li><code>oidc</code> - OpenID Connect authentication</li> </ul> <p>Warning</p> <p>Never use <code>none</code> authentication in production! Always use <code>bearer</code> or <code>oidc</code>.</p>"},{"location":"getting-started/configuration/#database","title":"Database","text":"<p>Configure the database for persistent storage:</p> <pre><code># Database connection URL\nMCP_DATABASE_URL=sqlite:///mcp-devbench.db\n\n# For PostgreSQL:\n# MCP_DATABASE_URL=postgresql://user:pass@localhost/mcp_devbench\n\n# Connection pool settings\nMCP_DB_POOL_SIZE=5\nMCP_DB_MAX_OVERFLOW=10\nMCP_DB_POOL_TIMEOUT=30\n</code></pre>"},{"location":"getting-started/configuration/#docker-configuration","title":"Docker Configuration","text":"<p>Configure Docker daemon connection:</p> <pre><code># Docker daemon socket\nMCP_DOCKER_HOST=unix:///var/run/docker.sock\n\n# For remote Docker:\n# MCP_DOCKER_HOST=tcp://docker-host:2376\n# MCP_DOCKER_TLS_VERIFY=1\n# MCP_DOCKER_CERT_PATH=/path/to/certs\n</code></pre>"},{"location":"getting-started/configuration/#security-settings","title":"Security Settings","text":""},{"location":"getting-started/configuration/#image-policy","title":"Image Policy","text":"<p>Control which Docker images can be spawned:</p> <pre><code># Allowed images (comma-separated)\nMCP_ALLOWED_IMAGES=python:3.11-slim,node:18-slim,ubuntu:22.04\n\n# Allow all images (DANGEROUS - dev only)\n# MCP_ALLOWED_IMAGES=*\n</code></pre> <p>Danger</p> <p>Using <code>*</code> for allowed images is a security risk. Only do this in trusted development environments.</p>"},{"location":"getting-started/configuration/#container-security","title":"Container Security","text":"<p>Configure container security policies:</p> <pre><code># Default memory limit (MB)\nMCP_CONTAINER_MEMORY_LIMIT=512\n\n# Default CPU limit (cores)\nMCP_CONTAINER_CPU_LIMIT=1.0\n\n# Default PID limit\nMCP_CONTAINER_PID_LIMIT=256\n\n# Enable read-only root filesystem\nMCP_CONTAINER_READ_ONLY_ROOTFS=true\n\n# Drop all capabilities\nMCP_CONTAINER_DROP_CAPABILITIES=true\n</code></pre>"},{"location":"getting-started/configuration/#execution-limits","title":"Execution Limits","text":"<p>Control command execution:</p> <pre><code># Maximum concurrent executions per container\nMCP_MAX_CONCURRENT_EXECS=4\n\n# Default execution timeout (seconds)\nMCP_DEFAULT_EXEC_TIMEOUT=300\n\n# Maximum execution timeout (seconds)\nMCP_MAX_EXEC_TIMEOUT=3600\n</code></pre>"},{"location":"getting-started/configuration/#filesystem-security","title":"Filesystem Security","text":"<p>Configure filesystem operation security:</p> <pre><code># Workspace directory in containers\nMCP_WORKSPACE_PATH=/workspace\n\n# Maximum file size (MB)\nMCP_MAX_FILE_SIZE=100\n\n# Enable path validation\nMCP_VALIDATE_PATHS=true\n</code></pre>"},{"location":"getting-started/configuration/#operational-settings","title":"Operational Settings","text":""},{"location":"getting-started/configuration/#logging","title":"Logging","text":"<p>Configure logging behavior:</p> <pre><code># Log level: DEBUG, INFO, WARNING, ERROR, CRITICAL\nMCP_LOG_LEVEL=INFO\n\n# Log format: json or text\nMCP_LOG_FORMAT=json\n\n# Enable audit logging\nMCP_AUDIT_ENABLED=true\n\n# Audit log file\nMCP_AUDIT_LOG_FILE=/var/log/mcp-devbench/audit.log\n</code></pre>"},{"location":"getting-started/configuration/#metrics","title":"Metrics","text":"<p>Configure Prometheus metrics:</p> <pre><code># Enable Prometheus metrics\nMCP_METRICS_ENABLED=true\n\n# Metrics endpoint port\nMCP_METRICS_PORT=9090\n</code></pre>"},{"location":"getting-started/configuration/#container-pool","title":"Container Pool","text":"<p>Configure the warm container pool:</p> <pre><code># Enable warm container pool\nMCP_WARM_POOL_ENABLED=true\n\n# Warm pool size\nMCP_WARM_POOL_SIZE=5\n\n# Warm pool image\nMCP_WARM_POOL_IMAGE=python:3.11-slim\n\n# Pool refresh interval (seconds)\nMCP_WARM_POOL_REFRESH_INTERVAL=300\n</code></pre>"},{"location":"getting-started/configuration/#cleanup","title":"Cleanup","text":"<p>Configure automatic cleanup:</p> <pre><code># Enable automatic cleanup\nMCP_CLEANUP_ENABLED=true\n\n# Cleanup interval (seconds)\nMCP_CLEANUP_INTERVAL=300\n\n# Default TTL for ephemeral containers (seconds)\nMCP_DEFAULT_CONTAINER_TTL=3600\n\n# Cleanup orphaned containers on startup\nMCP_CLEANUP_ON_STARTUP=true\n</code></pre>"},{"location":"getting-started/configuration/#example-configurations","title":"Example Configurations","text":""},{"location":"getting-started/configuration/#development","title":"Development","text":"<pre><code># .env for development\nMCP_TRANSPORT_MODE=stdio\nMCP_AUTH_MODE=none\nMCP_DATABASE_URL=sqlite:///dev.db\nMCP_DOCKER_HOST=unix:///var/run/docker.sock\nMCP_ALLOWED_IMAGES=*\nMCP_LOG_LEVEL=DEBUG\nMCP_LOG_FORMAT=text\n</code></pre>"},{"location":"getting-started/configuration/#production-http","title":"Production (HTTP)","text":"<pre><code># .env for production\nMCP_TRANSPORT_MODE=streamable-http\nMCP_HOST=0.0.0.0\nMCP_PORT=8000\nMCP_AUTH_MODE=oidc\nMCP_OAUTH_CONFIG_URL=https://auth.example.com/.well-known/openid-configuration\nMCP_OAUTH_CLIENT_ID=mcp-devbench\nMCP_DATABASE_URL=postgresql://user:pass@db:5432/mcp_devbench\nMCP_DOCKER_HOST=unix:///var/run/docker.sock\nMCP_ALLOWED_IMAGES=python:3.11-slim,node:18-slim,ubuntu:22.04\nMCP_LOG_LEVEL=INFO\nMCP_LOG_FORMAT=json\nMCP_METRICS_ENABLED=true\nMCP_AUDIT_ENABLED=true\nMCP_WARM_POOL_ENABLED=true\nMCP_CLEANUP_ENABLED=true\n</code></pre>"},{"location":"getting-started/configuration/#docker-compose","title":"Docker Compose","text":"<pre><code>version: '3.8'\n\nservices:\n  mcp-devbench:\n    image: ghcr.io/pvliesdonk/mcp-devbench:latest\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - ./data:/data\n    ports:\n      - \"8000:8000\"\n      - \"9090:9090\"\n    environment:\n      MCP_TRANSPORT_MODE: streamable-http\n      MCP_HOST: 0.0.0.0\n      MCP_PORT: 8000\n      MCP_AUTH_MODE: bearer\n      MCP_AUTH_BEARER_TOKEN: ${BEARER_TOKEN}\n      MCP_DATABASE_URL: sqlite:////data/mcp-devbench.db\n      MCP_ALLOWED_IMAGES: python:3.11-slim,node:18-slim\n      MCP_LOG_LEVEL: INFO\n      MCP_LOG_FORMAT: json\n      MCP_METRICS_ENABLED: \"true\"\n      MCP_AUDIT_ENABLED: \"true\"\n</code></pre>"},{"location":"getting-started/configuration/#environment-variable-reference","title":"Environment Variable Reference","text":"<p>For a complete list of all environment variables with their defaults and descriptions, refer to the configuration examples above and the Security Guide for security-related settings.</p>"},{"location":"getting-started/configuration/#next-steps","title":"Next Steps","text":"<ul> <li>User Guide - Learn how to use MCP DevBench</li> <li>Security Guide - Understand security implications</li> <li>Operations Guide - Deploy to production</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This guide walks you through installing MCP DevBench on your system.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing MCP DevBench, ensure you have:</p> <ul> <li>Python 3.11 or higher - Download Python</li> <li>Docker Engine - Install Docker</li> <li>uv package manager - Fast Python package installer</li> </ul>"},{"location":"getting-started/installation/#installing-uv","title":"Installing uv","text":"<p>uv is the recommended package manager for MCP DevBench. It's significantly faster than pip and provides better dependency resolution.</p> <pre><code>pip install uv\n</code></pre>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#from-source-recommended-for-development","title":"From Source (Recommended for Development)","text":"<ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/pvliesdonk/mcp-devbench.git\ncd mcp-devbench\n</code></pre> <ol> <li>Install dependencies:</li> </ol> <pre><code>uv sync\n</code></pre> <p>This creates a virtual environment in <code>.venv/</code> and installs all dependencies.</p> <ol> <li>Verify installation:</li> </ol> <pre><code>uv run python -m mcp_devbench.server --version\n</code></pre>"},{"location":"getting-started/installation/#using-docker","title":"Using Docker","text":"<ol> <li>Pull the pre-built image:</li> </ol> <pre><code>docker pull ghcr.io/pvliesdonk/mcp-devbench:latest\n</code></pre> <p>Or build locally:</p> <pre><code>docker build -t mcp-devbench .\n</code></pre> <ol> <li>Verify installation:</li> </ol> <pre><code>docker run --rm mcp-devbench --version\n</code></pre>"},{"location":"getting-started/installation/#using-docker-compose","title":"Using Docker Compose","text":"<ol> <li>Create <code>docker-compose.yml</code>:</li> </ol> <pre><code>version: '3.8'\n\nservices:\n  mcp-devbench:\n    image: ghcr.io/pvliesdonk/mcp-devbench:latest\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    ports:\n      - \"8000:8000\"\n    environment:\n      MCP_TRANSPORT_MODE: streamable-http\n      MCP_HOST: 0.0.0.0\n      MCP_PORT: 8000\n      MCP_AUTH_MODE: none\n</code></pre> <ol> <li>Start the service:</li> </ol> <pre><code>docker-compose up -d\n</code></pre>"},{"location":"getting-started/installation/#development-installation","title":"Development Installation","text":"<p>If you plan to contribute to MCP DevBench, install with development dependencies:</p> <pre><code>uv sync --extra dev\n</code></pre> <p>This installs additional tools: - pytest (testing) - ruff (linting and formatting) - pyright (type checking) - pre-commit (git hooks)</p> <p>Set up pre-commit hooks:</p> <pre><code>uv run pre-commit install\n</code></pre>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<p>Test that MCP DevBench is working:</p> <pre><code># Run in stdio mode\nuv run python -m mcp_devbench.server\n\n# In another terminal, test with a simple MCP client\n# (The server will exit when the client disconnects)\n</code></pre> <p>You should see startup logs indicating the server is ready.</p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start Guide - Learn the basics</li> <li>Configuration - Configure MCP DevBench for your needs</li> <li>User Guide - Deep dive into features</li> </ul>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#docker-socket-permission-denied","title":"Docker Socket Permission Denied","text":"<p>If you get a permission error accessing <code>/var/run/docker.sock</code>:</p> <pre><code># Add your user to the docker group\nsudo usermod -aG docker $USER\n\n# Log out and back in for changes to take effect\n</code></pre>"},{"location":"getting-started/installation/#uv-command-not-found","title":"uv command not found","text":"<p>Make sure uv is installed and in your PATH:</p> <pre><code>pip install --user uv\nexport PATH=\"$HOME/.local/bin:$PATH\"\n</code></pre>"},{"location":"getting-started/installation/#python-version-issues","title":"Python Version Issues","text":"<p>MCP DevBench requires Python 3.11+. Check your version:</p> <pre><code>python --version\n</code></pre> <p>If you have an older version, install Python 3.11+ from python.org.</p> <p>For more troubleshooting help, see the Troubleshooting Guide.</p>"},{"location":"getting-started/quickstart/","title":"Quick Start","text":"<p>This guide will help you get started with MCP DevBench in under 5 minutes.</p>"},{"location":"getting-started/quickstart/#start-the-server","title":"Start the Server","text":"<p>The fastest way to get started is using stdio mode:</p> <pre><code>uv run python -m mcp_devbench.server\n</code></pre> <p>For production use with HTTP transport:</p> <pre><code>export MCP_TRANSPORT_MODE=streamable-http\nexport MCP_HOST=0.0.0.0\nexport MCP_PORT=8000\nuv run python -m mcp_devbench.server\n</code></pre>"},{"location":"getting-started/quickstart/#basic-workflow","title":"Basic Workflow","text":"<p>MCP DevBench provides tools for managing Docker containers through the MCP protocol. Here's a typical workflow:</p>"},{"location":"getting-started/quickstart/#1-spawn-a-container","title":"1. Spawn a Container","text":"<p>Create a new container from a Docker image:</p> <pre><code>{\n  \"image\": \"python:3.11-slim\",\n  \"persistent\": false,\n  \"alias\": \"my-workspace\"\n}\n</code></pre> <p>This returns a <code>container_id</code> that you'll use for subsequent operations.</p>"},{"location":"getting-started/quickstart/#2-attach-to-container","title":"2. Attach to Container","text":"<p>Attach your client session to the container:</p> <pre><code>{\n  \"target\": \"my-workspace\",  # or use container_id\n  \"client_name\": \"claude\",\n  \"session_id\": \"session-123\"\n}\n</code></pre>"},{"location":"getting-started/quickstart/#3-execute-commands","title":"3. Execute Commands","text":"<p>Run commands in the container:</p> <pre><code>{\n  \"container_id\": \"c_abc123...\",\n  \"cmd\": [\"python\", \"--version\"],\n  \"timeout_s\": 30\n}\n</code></pre> <p>This returns an <code>exec_id</code> for polling results.</p>"},{"location":"getting-started/quickstart/#4-poll-for-output","title":"4. Poll for Output","text":"<p>Retrieve command output:</p> <pre><code>{\n  \"exec_id\": \"e_xyz789...\",\n  \"after_seq\": 0\n}\n</code></pre>"},{"location":"getting-started/quickstart/#5-filesystem-operations","title":"5. Filesystem Operations","text":"<p>Write a file: <pre><code>{\n  \"container_id\": \"c_abc123...\",\n  \"path\": \"/workspace/hello.py\",\n  \"content\": \"print('Hello, MCP DevBench!')\"\n}\n</code></pre></p> <p>Read a file: <pre><code>{\n  \"container_id\": \"c_abc123...\",\n  \"path\": \"/workspace/hello.py\"\n}\n</code></pre></p> <p>List directory: <pre><code>{\n  \"container_id\": \"c_abc123...\",\n  \"path\": \"/workspace\"\n}\n</code></pre></p>"},{"location":"getting-started/quickstart/#6-clean-up","title":"6. Clean Up","text":"<p>Stop and remove the container:</p> <pre><code>{\n  \"container_id\": \"c_abc123...\",\n  \"force\": true\n}\n</code></pre>"},{"location":"getting-started/quickstart/#mcp-tools-overview","title":"MCP Tools Overview","text":"<p>MCP DevBench provides the following tools:</p> Tool Purpose <code>spawn</code> Create a new container <code>attach</code> Attach client to a container <code>exec_start</code> Start command execution <code>exec_poll</code> Poll for command output <code>exec_signal</code> Send signal to execution <code>fs_read</code> Read file contents <code>fs_write</code> Write file contents <code>fs_delete</code> Delete file or directory <code>fs_list</code> List directory contents <code>kill</code> Stop and remove container <code>stats</code> Get container statistics <code>list</code> List all containers <p>For detailed documentation of each tool, see the API Tools Reference.</p>"},{"location":"getting-started/quickstart/#example-python-development-workflow","title":"Example: Python Development Workflow","text":"<p>Here's a complete example of using MCP DevBench for Python development:</p> <ol> <li> <p>Spawn a Python container: <pre><code>spawn({\n  \"image\": \"python:3.11-slim\",\n  \"alias\": \"python-dev\"\n})\n</code></pre></p> </li> <li> <p>Attach to it: <pre><code>attach({\n  \"target\": \"python-dev\",\n  \"client_name\": \"claude\",\n  \"session_id\": \"dev-session\"\n})\n</code></pre></p> </li> <li> <p>Create a Python script: <pre><code>fs_write({\n  \"container_id\": \"c_abc123...\",\n  \"path\": \"/workspace/app.py\",\n  \"content\": \"\"\"\ndef greet(name):\n    return f\"Hello, {name}!\"\n\nif __name__ == \"__main__\":\n    print(greet(\"World\"))\n\"\"\"\n})\n</code></pre></p> </li> <li> <p>Run the script: <pre><code>exec_start({\n  \"container_id\": \"c_abc123...\",\n  \"cmd\": [\"python\", \"/workspace/app.py\"],\n  \"timeout_s\": 30\n})\n</code></pre></p> </li> <li> <p>Poll for output: <pre><code>exec_poll({\n  \"exec_id\": \"e_xyz789...\",\n  \"after_seq\": 0\n})\n</code></pre></p> </li> <li> <p>Clean up: <pre><code>kill({\n  \"container_id\": \"c_abc123...\",\n  \"force\": true\n})\n</code></pre></p> </li> </ol>"},{"location":"getting-started/quickstart/#configuration","title":"Configuration","text":"<p>MCP DevBench is configured via environment variables. Here are the most important ones:</p> Variable Default Description <code>MCP_TRANSPORT_MODE</code> <code>stdio</code> Transport mode: <code>stdio</code>, <code>sse</code>, or <code>streamable-http</code> <code>MCP_HOST</code> <code>localhost</code> Host to bind to (HTTP mode) <code>MCP_PORT</code> <code>8000</code> Port to bind to (HTTP mode) <code>MCP_AUTH_MODE</code> <code>none</code> Authentication mode: <code>none</code>, <code>bearer</code>, or <code>oidc</code> <code>MCP_DATABASE_URL</code> <code>sqlite:///mcp-devbench.db</code> Database connection string <code>MCP_DOCKER_HOST</code> <code>unix:///var/run/docker.sock</code> Docker daemon socket <p>For a complete list of configuration options, see the Configuration Guide.</p>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>User Guide - Learn about container management</li> <li>API Reference - Detailed API documentation</li> <li>Security - Understand security features</li> <li>Operations - Deploy to production</li> </ul>"},{"location":"guide/containers/","title":"Container Management","text":"<p>This guide covers container lifecycle management in MCP DevBench.</p>"},{"location":"guide/containers/#overview","title":"Overview","text":"<p>MCP DevBench manages Docker containers through a high-level API that provides:</p> <ul> <li>Secure isolation - Each container runs with restricted capabilities</li> <li>Resource limits - CPU, memory, and PID constraints</li> <li>Persistent storage - Optional persistent volumes for containers</li> <li>Automatic cleanup - TTL-based expiration for ephemeral containers</li> <li>Warm pool - Pre-warmed containers for instant provisioning</li> </ul>"},{"location":"guide/containers/#spawning-containers","title":"Spawning Containers","text":"<p>Create a new container using the <code>spawn</code> tool:</p> <pre><code>{\n  \"image\": \"python:3.11-slim\",\n  \"persistent\": false,\n  \"alias\": \"my-workspace\",\n  \"ttl_s\": 3600\n}\n</code></pre> <p>Parameters:</p> <ul> <li><code>image</code> (required) - Docker image reference</li> <li><code>persistent</code> - Whether container persists across server restarts (default: <code>false</code>)</li> <li><code>alias</code> - User-friendly name for the container (optional)</li> <li><code>ttl_s</code> - Time-to-live in seconds for ephemeral containers (optional)</li> </ul> <p>Returns:</p> <pre><code>{\n  \"container_id\": \"c_abc123...\",\n  \"status\": \"running\",\n  \"image\": \"python:3.11-slim\",\n  \"workspace_path\": \"/workspace\"\n}\n</code></pre>"},{"location":"guide/containers/#image-policy","title":"Image Policy","text":"<p>Only images in the allow-list can be spawned. Configure via <code>MCP_ALLOWED_IMAGES</code>:</p> <pre><code># Specific images only\nMCP_ALLOWED_IMAGES=python:3.11-slim,node:18-slim,ubuntu:22.04\n\n# Development: Allow all (NOT recommended for production)\nMCP_ALLOWED_IMAGES=*\n</code></pre>"},{"location":"guide/containers/#persistent-vs-ephemeral","title":"Persistent vs Ephemeral","text":"<p>Ephemeral containers (default): - Automatically cleaned up based on TTL - Workspace data deleted when container is removed - Best for temporary workspaces</p> <p>Persistent containers: - Survive server restarts - Workspace data preserved - Must be manually cleaned up - Best for long-lived projects</p>"},{"location":"guide/containers/#attaching-to-containers","title":"Attaching to Containers","text":"<p>Before executing commands or accessing files, attach your client session:</p> <pre><code>{\n  \"target\": \"my-workspace\",  # or use container_id\n  \"client_name\": \"claude\",\n  \"session_id\": \"unique-session-id\"\n}\n</code></pre> <p>Parameters:</p> <ul> <li><code>target</code> (required) - Container ID or alias</li> <li><code>client_name</code> (required) - Name of the client (for auditing)</li> <li><code>session_id</code> (required) - Unique session identifier</li> </ul> <p>Multiple clients can attach to the same container concurrently.</p>"},{"location":"guide/containers/#listing-containers","title":"Listing Containers","text":"<p>Get a list of all containers:</p> <pre><code>{\n  \"include_stopped\": false\n}\n</code></pre> <p>Returns:</p> <pre><code>{\n  \"containers\": [\n    {\n      \"container_id\": \"c_abc123...\",\n      \"alias\": \"my-workspace\",\n      \"image\": \"python:3.11-slim\",\n      \"status\": \"running\",\n      \"created_at\": \"2024-01-15T10:30:00Z\",\n      \"persistent\": false,\n      \"expires_at\": \"2024-01-15T11:30:00Z\"\n    }\n  ]\n}\n</code></pre>"},{"location":"guide/containers/#stopping-containers","title":"Stopping Containers","text":"<p>Stop and remove a container:</p> <pre><code>{\n  \"container_id\": \"c_abc123...\",\n  \"force\": true\n}\n</code></pre> <p>Parameters:</p> <ul> <li><code>container_id</code> (required) - Container to stop</li> <li><code>force</code> - Force stop even if operations are running (default: <code>false</code>)</li> </ul> <p>Warning</p> <p>Forcing stop will terminate all running executions immediately.</p>"},{"location":"guide/containers/#container-lifecycle","title":"Container Lifecycle","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Created: spawn\n    Created --&gt; Running: auto-start\n    Running --&gt; Stopped: kill\n    Stopped --&gt; [*]: cleanup\n\n    Running --&gt; Running: exec/fs operations\n    Running --&gt; Attached: attach\n    Attached --&gt; Running: detach</code></pre>"},{"location":"guide/containers/#states","title":"States","text":"<ul> <li>Created - Container exists but not started</li> <li>Running - Container is running and ready for operations</li> <li>Attached - Client session is attached</li> <li>Stopped - Container has been stopped</li> <li>Removed - Container and data deleted</li> </ul>"},{"location":"guide/containers/#warm-container-pool","title":"Warm Container Pool","text":"<p>MCP DevBench maintains a pool of pre-warmed containers for instant provisioning:</p>"},{"location":"guide/containers/#how-it-works","title":"How It Works","text":"<ol> <li>Pool maintains N containers in ready state</li> <li>When client attaches, a warm container is assigned</li> <li>Pool automatically refills to maintain size</li> <li>Containers expire if unused for too long</li> </ol>"},{"location":"guide/containers/#configuration","title":"Configuration","text":"<pre><code># Enable warm pool\nMCP_WARM_POOL_ENABLED=true\n\n# Pool size\nMCP_WARM_POOL_SIZE=5\n\n# Image for warm containers\nMCP_WARM_POOL_IMAGE=python:3.11-slim\n\n# Refresh interval (seconds)\nMCP_WARM_POOL_REFRESH_INTERVAL=300\n</code></pre>"},{"location":"guide/containers/#using-warm-pool","title":"Using Warm Pool","text":"<p>Attach to a warm container:</p> <pre><code>{\n  \"target\": \"warm-pool\",\n  \"client_name\": \"claude\",\n  \"session_id\": \"my-session\"\n}\n</code></pre> <p>This provides sub-second provisioning vs 5-10 seconds for cold start.</p>"},{"location":"guide/containers/#resource-management","title":"Resource Management","text":""},{"location":"guide/containers/#resource-limits","title":"Resource Limits","text":"<p>All containers have default resource limits:</p> <pre><code># Memory limit (MB)\nMCP_CONTAINER_MEMORY_LIMIT=512\n\n# CPU limit (cores)\nMCP_CONTAINER_CPU_LIMIT=1.0\n\n# Process limit\nMCP_CONTAINER_PID_LIMIT=256\n</code></pre>"},{"location":"guide/containers/#security-constraints","title":"Security Constraints","text":"<p>Containers run with:</p> <ul> <li>Read-only root filesystem - Only <code>/workspace</code> is writable</li> <li>Dropped capabilities - All Linux capabilities dropped</li> <li>Non-root user - Runs as UID 1000</li> <li>No new privileges - Cannot escalate privileges</li> </ul> <p>See the Security Guide for details.</p>"},{"location":"guide/containers/#automatic-cleanup","title":"Automatic Cleanup","text":""},{"location":"guide/containers/#ttl-based-cleanup","title":"TTL-Based Cleanup","text":"<p>Ephemeral containers are automatically cleaned up when:</p> <ol> <li>TTL expires (if specified)</li> <li>Default TTL expires (if no TTL specified)</li> <li>Server shutdown (graceful drain)</li> </ol> <p>Configure cleanup:</p> <pre><code># Enable cleanup\nMCP_CLEANUP_ENABLED=true\n\n# Cleanup interval\nMCP_CLEANUP_INTERVAL=300\n\n# Default TTL (seconds)\nMCP_DEFAULT_CONTAINER_TTL=3600\n</code></pre>"},{"location":"guide/containers/#manual-cleanup","title":"Manual Cleanup","text":"<p>Clean up specific containers:</p> <pre><code>kill({\n  \"container_id\": \"c_abc123...\",\n  \"force\": true\n})\n</code></pre>"},{"location":"guide/containers/#cleanup-on-startup","title":"Cleanup on Startup","text":"<p>Reconcile state on server startup:</p> <pre><code>MCP_CLEANUP_ON_STARTUP=true\n</code></pre> <p>This removes orphaned containers and syncs database with Docker state.</p>"},{"location":"guide/containers/#best-practices","title":"Best Practices","text":""},{"location":"guide/containers/#development-workflows","title":"Development Workflows","text":"<ol> <li>Use aliases - Makes containers easier to find</li> <li>Set TTLs - Prevent orphaned containers</li> <li>Monitor metrics - Track container count and usage</li> <li>Clean up regularly - Don't let containers accumulate</li> </ol>"},{"location":"guide/containers/#production-deployments","title":"Production Deployments","text":"<ol> <li>Use persistent containers - For long-lived workspaces</li> <li>Enable warm pool - Faster provisioning</li> <li>Monitor resource usage - Watch CPU/memory/disk</li> <li>Set up alerts - Container count, failed spawns</li> <li>Audit logs - Track all container operations</li> </ol>"},{"location":"guide/containers/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guide/containers/#container-wont-start","title":"Container Won't Start","text":"<p>Check Docker daemon: <pre><code>docker ps\n</code></pre></p> <p>Check image exists: <pre><code>docker images | grep your-image\n</code></pre></p> <p>Check logs: <pre><code>docker logs container-id\n</code></pre></p>"},{"location":"guide/containers/#out-of-resources","title":"Out of Resources","text":"<p>Check Docker resources: <pre><code>docker system df\n</code></pre></p> <p>Clean up unused resources: <pre><code>docker system prune -a\n</code></pre></p>"},{"location":"guide/containers/#containers-not-cleaned-up","title":"Containers Not Cleaned Up","text":"<p>Check cleanup configuration: <pre><code>echo $MCP_CLEANUP_ENABLED\necho $MCP_CLEANUP_INTERVAL\n</code></pre></p> <p>Manually trigger cleanup or restart server.</p>"},{"location":"guide/containers/#next-steps","title":"Next Steps","text":"<ul> <li>Command Execution - Run commands in containers</li> <li>Filesystem Operations - Manage files and directories</li> <li>Security Guide - Understand security model</li> <li>Monitoring - Track container health</li> </ul>"},{"location":"guide/execution/","title":"Command Execution","text":"<p>This guide covers executing commands in containers with MCP DevBench.</p>"},{"location":"guide/execution/#overview","title":"Overview","text":"<p>MCP DevBench provides asynchronous command execution with:</p> <ul> <li>Non-blocking execution - Commands run in background</li> <li>Streaming output - Real-time stdout/stderr</li> <li>Timeout handling - Automatic termination</li> <li>Signal support - Send signals to running commands</li> <li>Resource tracking - CPU/memory usage stats</li> <li>Concurrent execution - Multiple commands per container</li> </ul>"},{"location":"guide/execution/#starting-execution","title":"Starting Execution","text":"<p>Start a command with <code>exec_start</code>:</p> <pre><code>{\n  \"container_id\": \"c_abc123...\",\n  \"cmd\": [\"python\", \"script.py\"],\n  \"timeout_s\": 300,\n  \"env\": {\"DEBUG\": \"true\"},\n  \"workdir\": \"/workspace\"\n}\n</code></pre> <p>Parameters:</p> <ul> <li><code>container_id</code> (required) - Container to execute in</li> <li><code>cmd</code> (required) - Command and arguments as array</li> <li><code>timeout_s</code> - Execution timeout in seconds (default: 300)</li> <li><code>env</code> - Environment variables (optional)</li> <li><code>workdir</code> - Working directory (default: <code>/workspace</code>)</li> </ul> <p>Returns:</p> <pre><code>{\n  \"exec_id\": \"e_xyz789...\",\n  \"status\": \"running\"\n}\n</code></pre>"},{"location":"guide/execution/#polling-for-output","title":"Polling for Output","text":"<p>Poll for command output with <code>exec_poll</code>:</p> <pre><code>{\n  \"exec_id\": \"e_xyz789...\",\n  \"after_seq\": 0\n}\n</code></pre> <p>Parameters:</p> <ul> <li><code>exec_id</code> (required) - Execution to poll</li> <li><code>after_seq</code> - Return messages after this sequence number</li> </ul> <p>Returns:</p> <pre><code>{\n  \"messages\": [\n    {\n      \"seq\": 1,\n      \"stream\": \"stdout\",\n      \"data\": \"Hello, World!\\n\",\n      \"timestamp\": \"2024-01-15T10:30:01Z\"\n    },\n    {\n      \"seq\": 2,\n      \"stream\": \"stderr\",\n      \"data\": \"Warning: deprecation\\n\",\n      \"timestamp\": \"2024-01-15T10:30:02Z\"\n    }\n  ],\n  \"complete\": false,\n  \"exit_code\": null\n}\n</code></pre> <p>When <code>complete</code> is <code>true</code>, the execution has finished and <code>exit_code</code> is set.</p>"},{"location":"guide/execution/#streaming-pattern","title":"Streaming Pattern","text":"<p>Typical polling loop:</p> <pre><code>exec_id = exec_start(...)[\"exec_id\"]\nseq = 0\n\nwhile True:\n    result = exec_poll(exec_id, after_seq=seq)\n\n    for msg in result[\"messages\"]:\n        print(f\"{msg['stream']}: {msg['data']}\")\n        seq = msg[\"seq\"]\n\n    if result[\"complete\"]:\n        print(f\"Exit code: {result['exit_code']}\")\n        break\n\n    await asyncio.sleep(0.5)\n</code></pre>"},{"location":"guide/execution/#sending-signals","title":"Sending Signals","text":"<p>Send signals to running executions with <code>exec_signal</code>:</p> <pre><code>{\n  \"exec_id\": \"e_xyz789...\",\n  \"signal\": \"SIGTERM\"\n}\n</code></pre> <p>Supported signals:</p> <ul> <li><code>SIGTERM</code> - Graceful termination</li> <li><code>SIGKILL</code> - Force kill</li> <li><code>SIGINT</code> - Interrupt (Ctrl+C)</li> <li><code>SIGHUP</code> - Hangup</li> <li><code>SIGUSR1</code>, <code>SIGUSR2</code> - User-defined signals</li> </ul>"},{"location":"guide/execution/#execution-limits","title":"Execution Limits","text":""},{"location":"guide/execution/#timeout","title":"Timeout","text":"<p>Commands automatically timeout:</p> <pre><code># Default timeout (seconds)\nMCP_DEFAULT_EXEC_TIMEOUT=300\n\n# Maximum allowed timeout\nMCP_MAX_EXEC_TIMEOUT=3600\n</code></pre> <p>Timeout behavior: 1. Sends <code>SIGTERM</code> to process 2. Waits 10 seconds 3. Sends <code>SIGKILL</code> if still running</p>"},{"location":"guide/execution/#concurrency","title":"Concurrency","text":"<p>Maximum concurrent executions per container:</p> <pre><code>MCP_MAX_CONCURRENT_EXECS=4\n</code></pre> <p>Exceeding this limit queues or rejects new executions.</p>"},{"location":"guide/execution/#resource-tracking","title":"Resource Tracking","text":"<p>Poll result includes resource usage:</p> <pre><code>{\n  \"complete\": true,\n  \"exit_code\": 0,\n  \"usage\": {\n    \"cpu_time_ms\": 1234,\n    \"memory_peak_mb\": 45,\n    \"wall_time_ms\": 5678\n  }\n}\n</code></pre>"},{"location":"guide/execution/#examples","title":"Examples","text":""},{"location":"guide/execution/#running-python-scripts","title":"Running Python Scripts","text":"<pre><code># Write script\nfs_write({\n  \"container_id\": \"c_abc...\",\n  \"path\": \"/workspace/hello.py\",\n  \"content\": \"print('Hello, World!')\"\n})\n\n# Execute\nexec_id = exec_start({\n  \"container_id\": \"c_abc...\",\n  \"cmd\": [\"python\", \"/workspace/hello.py\"],\n  \"timeout_s\": 30\n})[\"exec_id\"]\n\n# Poll for output\nresult = exec_poll({\n  \"exec_id\": exec_id,\n  \"after_seq\": 0\n})\n</code></pre>"},{"location":"guide/execution/#installing-packages","title":"Installing Packages","text":"<pre><code>exec_start({\n  \"container_id\": \"c_abc...\",\n  \"cmd\": [\"pip\", \"install\", \"requests\"],\n  \"timeout_s\": 300\n})\n</code></pre>"},{"location":"guide/execution/#running-tests","title":"Running Tests","text":"<pre><code>exec_start({\n  \"container_id\": \"c_abc...\",\n  \"cmd\": [\"pytest\", \"/workspace/tests\"],\n  \"timeout_s\": 600,\n  \"env\": {\"PYTHONPATH\": \"/workspace\"}\n})\n</code></pre>"},{"location":"guide/execution/#long-running-processes","title":"Long-Running Processes","text":"<pre><code># Start server\nexec_id = exec_start({\n  \"container_id\": \"c_abc...\",\n  \"cmd\": [\"python\", \"-m\", \"http.server\", \"8000\"],\n  \"timeout_s\": 3600\n})[\"exec_id\"]\n\n# Later, stop it\nexec_signal({\n  \"exec_id\": exec_id,\n  \"signal\": \"SIGTERM\"\n})\n</code></pre>"},{"location":"guide/execution/#best-practices","title":"Best Practices","text":""},{"location":"guide/execution/#command-construction","title":"Command Construction","text":"<p>\u2705 Do: <pre><code>cmd = [\"python\", \"-c\", \"print('hello')\"]\n</code></pre></p> <p>\u274c Don't: <pre><code>cmd = [\"python -c print('hello')\"]  # Wrong! This is one string\n</code></pre></p>"},{"location":"guide/execution/#error-handling","title":"Error Handling","text":"<p>Always check exit codes:</p> <pre><code>result = exec_poll(exec_id, after_seq=0)\nif result[\"complete\"]:\n    if result[\"exit_code\"] != 0:\n        # Handle error\n        print(f\"Command failed with code {result['exit_code']}\")\n</code></pre>"},{"location":"guide/execution/#resource-usage","title":"Resource Usage","text":"<p>Monitor resource consumption:</p> <pre><code>usage = result[\"usage\"]\nif usage[\"memory_peak_mb\"] &gt; 400:\n    print(\"Warning: High memory usage\")\n</code></pre>"},{"location":"guide/execution/#timeouts","title":"Timeouts","text":"<p>Set appropriate timeouts:</p> <ul> <li>Quick commands: 30-60 seconds</li> <li>Package installation: 300-600 seconds</li> <li>Tests: 600-1800 seconds</li> <li>Long-running: 3600+ seconds</li> </ul>"},{"location":"guide/execution/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guide/execution/#command-times-out","title":"Command Times Out","text":"<ol> <li>Check if command is CPU-bound</li> <li>Increase timeout</li> <li>Break into smaller steps</li> <li>Check for deadlocks (waiting for input)</li> </ol>"},{"location":"guide/execution/#high-memory-usage","title":"High Memory Usage","text":"<ol> <li>Monitor with resource tracking</li> <li>Reduce batch sizes</li> <li>Use streaming processing</li> <li>Increase container memory limit</li> </ol>"},{"location":"guide/execution/#command-not-starting","title":"Command Not Starting","text":"<ol> <li>Verify container is running</li> <li>Check concurrent execution limit</li> <li>Review command syntax</li> <li>Check file permissions</li> </ol>"},{"location":"guide/execution/#next-steps","title":"Next Steps","text":"<ul> <li>Filesystem Operations - File management</li> <li>Container Management - Container lifecycle</li> <li>Monitoring - Performance tracking</li> </ul>"},{"location":"guide/filesystem/","title":"Filesystem Operations","text":"<p>This guide covers file and directory operations in MCP DevBench.</p>"},{"location":"guide/filesystem/#overview","title":"Overview","text":"<p>MCP DevBench provides secure filesystem operations:</p> <ul> <li>Path validation - All paths restricted to <code>/workspace</code></li> <li>Concurrent access - ETag-based optimistic locking</li> <li>Binary support - Handle both text and binary files</li> <li>Directory operations - Create, list, delete directories</li> <li>Atomic writes - No partial file corruption</li> </ul>"},{"location":"guide/filesystem/#workspace-structure","title":"Workspace Structure","text":"<p>All filesystem operations are constrained to <code>/workspace</code>:</p> <pre><code>/workspace/\n\u251c\u2500\u2500 your-files/\n\u2502   \u251c\u2500\u2500 script.py\n\u2502   \u2514\u2500\u2500 data.json\n\u251c\u2500\u2500 output/\n\u2502   \u2514\u2500\u2500 results.txt\n\u2514\u2500\u2500 temp/\n</code></pre> <p>Attempts to access paths outside <code>/workspace</code> are rejected.</p>"},{"location":"guide/filesystem/#reading-files","title":"Reading Files","text":"<p>Read file contents with <code>fs_read</code>:</p> <pre><code>{\n  \"container_id\": \"c_abc123...\",\n  \"path\": \"/workspace/script.py\"\n}\n</code></pre> <p>Returns:</p> <pre><code>{\n  \"content\": \"print('Hello, World!')\",\n  \"size\": 22,\n  \"etag\": \"abc123def456\",\n  \"mtime\": \"2024-01-15T10:30:00Z\"\n}\n</code></pre>"},{"location":"guide/filesystem/#binary-files","title":"Binary Files","text":"<p>Binary files are base64-encoded:</p> <pre><code>{\n  \"content\": \"iVBORw0KGgo...\",  # base64-encoded\n  \"encoding\": \"base64\",\n  \"size\": 1234\n}\n</code></pre>"},{"location":"guide/filesystem/#writing-files","title":"Writing Files","text":"<p>Write file contents with <code>fs_write</code>:</p> <pre><code>{\n  \"container_id\": \"c_abc123...\",\n  \"path\": \"/workspace/hello.py\",\n  \"content\": \"print('Hello, World!')\",\n  \"mode\": 0o644,\n  \"create_parents\": true\n}\n</code></pre> <p>Parameters:</p> <ul> <li><code>container_id</code> (required) - Container ID</li> <li><code>path</code> (required) - File path</li> <li><code>content</code> (required) - File contents (string or base64)</li> <li><code>mode</code> - File permissions (default: 0o644)</li> <li><code>create_parents</code> - Create parent directories (default: true)</li> <li><code>if_match</code> - ETag for optimistic locking (optional)</li> </ul> <p>Returns:</p> <pre><code>{\n  \"size\": 22,\n  \"etag\": \"new123abc456\"\n}\n</code></pre>"},{"location":"guide/filesystem/#concurrent-writes","title":"Concurrent Writes","text":"<p>Use ETags to prevent conflicts:</p> <pre><code># Read file\nresult = fs_read({\n  \"container_id\": \"c_abc...\",\n  \"path\": \"/workspace/data.json\"\n})\n\n# Modify content\ncontent = modify(result[\"content\"])\n\n# Write with ETag check\nfs_write({\n  \"container_id\": \"c_abc...\",\n  \"path\": \"/workspace/data.json\",\n  \"content\": content,\n  \"if_match\": result[\"etag\"]\n})\n</code></pre> <p>If another client modified the file, write fails with conflict error.</p>"},{"location":"guide/filesystem/#listing-directories","title":"Listing Directories","text":"<p>List directory contents with <code>fs_list</code>:</p> <pre><code>{\n  \"container_id\": \"c_abc123...\",\n  \"path\": \"/workspace\",\n  \"recursive\": false\n}\n</code></pre> <p>Returns:</p> <pre><code>{\n  \"entries\": [\n    {\n      \"path\": \"/workspace/script.py\",\n      \"type\": \"file\",\n      \"size\": 1234,\n      \"mtime\": \"2024-01-15T10:30:00Z\",\n      \"mode\": 0o644\n    },\n    {\n      \"path\": \"/workspace/output\",\n      \"type\": \"directory\",\n      \"mtime\": \"2024-01-15T10:30:00Z\",\n      \"mode\": 0o755\n    }\n  ]\n}\n</code></pre>"},{"location":"guide/filesystem/#recursive-listing","title":"Recursive Listing","text":"<p>List all files recursively:</p> <pre><code>{\n  \"container_id\": \"c_abc...\",\n  \"path\": \"/workspace\",\n  \"recursive\": true\n}\n</code></pre>"},{"location":"guide/filesystem/#deleting-files","title":"Deleting Files","text":"<p>Delete files or directories with <code>fs_delete</code>:</p> <pre><code>{\n  \"container_id\": \"c_abc123...\",\n  \"path\": \"/workspace/temp/file.txt\",\n  \"recursive\": false\n}\n</code></pre> <p>Parameters:</p> <ul> <li><code>container_id</code> (required) - Container ID</li> <li><code>path</code> (required) - File or directory path</li> <li><code>recursive</code> - Delete directory and contents (default: false)</li> </ul> <p>Returns:</p> <pre><code>{\n  \"status\": \"deleted\",\n  \"path\": \"/workspace/temp/file.txt\"\n}\n</code></pre> <p>Warning</p> <p>Recursive deletion is permanent and cannot be undone!</p>"},{"location":"guide/filesystem/#file-permissions","title":"File Permissions","text":""},{"location":"guide/filesystem/#default-permissions","title":"Default Permissions","text":"<ul> <li>Files: 0o644 (rw-r--r--)</li> <li>Directories: 0o755 (rwxr-xr-x)</li> </ul>"},{"location":"guide/filesystem/#custom-permissions","title":"Custom Permissions","text":"<p>Set custom permissions:</p> <pre><code>fs_write({\n  \"container_id\": \"c_abc...\",\n  \"path\": \"/workspace/script.sh\",\n  \"content\": \"#!/bin/bash\\necho 'hello'\",\n  \"mode\": 0o755  # Executable\n})\n</code></pre>"},{"location":"guide/filesystem/#path-security","title":"Path Security","text":""},{"location":"guide/filesystem/#validation","title":"Validation","text":"<p>All paths are validated:</p> <p>\u2705 Allowed: <pre><code>/workspace/file.txt\n/workspace/subdir/file.txt\n./file.txt  (relative to /workspace)\n</code></pre></p> <p>\u274c Rejected: <pre><code>/etc/passwd\n../../../etc/passwd\n/workspace/../etc/passwd\n</code></pre></p>"},{"location":"guide/filesystem/#symlink-protection","title":"Symlink Protection","text":"<p>Symlinks outside <code>/workspace</code> are rejected:</p> <pre><code># This will fail if symlink points outside workspace\nfs_read({\n  \"container_id\": \"c_abc...\",\n  \"path\": \"/workspace/link-to-etc\"\n})\n</code></pre>"},{"location":"guide/filesystem/#file-size-limits","title":"File Size Limits","text":"<p>Maximum file size is configurable:</p> <pre><code>MCP_MAX_FILE_SIZE=100  # MB\n</code></pre> <p>Exceeding this limit returns an error.</p>"},{"location":"guide/filesystem/#examples","title":"Examples","text":""},{"location":"guide/filesystem/#creating-directory-structure","title":"Creating Directory Structure","text":"<pre><code># Create nested directories\nfs_write({\n  \"container_id\": \"c_abc...\",\n  \"path\": \"/workspace/project/src/main.py\",\n  \"content\": \"def main(): pass\",\n  \"create_parents\": true\n})\n</code></pre>"},{"location":"guide/filesystem/#copying-files","title":"Copying Files","text":"<pre><code># Read source\nresult = fs_read({\n  \"container_id\": \"c_abc...\",\n  \"path\": \"/workspace/source.txt\"\n})\n\n# Write to destination\nfs_write({\n  \"container_id\": \"c_abc...\",\n  \"path\": \"/workspace/backup/source.txt\",\n  \"content\": result[\"content\"],\n  \"create_parents\": true\n})\n</code></pre>"},{"location":"guide/filesystem/#processing-files","title":"Processing Files","text":"<pre><code># Read file\nresult = fs_read({\n  \"container_id\": \"c_abc...\",\n  \"path\": \"/workspace/data.json\"\n})\n\n# Process content (in your code)\ndata = json.loads(result[\"content\"])\ndata[\"processed\"] = True\nnew_content = json.dumps(data, indent=2)\n\n# Write back\nfs_write({\n  \"container_id\": \"c_abc...\",\n  \"path\": \"/workspace/data.json\",\n  \"content\": new_content,\n  \"if_match\": result[\"etag\"]\n})\n</code></pre>"},{"location":"guide/filesystem/#cleaning-up","title":"Cleaning Up","text":"<pre><code># Delete temporary files\nfs_delete({\n  \"container_id\": \"c_abc...\",\n  \"path\": \"/workspace/temp\",\n  \"recursive\": true\n})\n</code></pre>"},{"location":"guide/filesystem/#best-practices","title":"Best Practices","text":""},{"location":"guide/filesystem/#etags","title":"ETags","text":"<p>Always use ETags for files that multiple clients might modify:</p> <pre><code># \u2705 Good\nresult = fs_read(...)\nfs_write(..., if_match=result[\"etag\"])\n\n# \u274c Bad (race condition)\nresult = fs_read(...)\n# ... time passes ...\nfs_write(...)  # No ETag check!\n</code></pre>"},{"location":"guide/filesystem/#file-organization","title":"File Organization","text":"<p>Organize files in subdirectories:</p> <pre><code>/workspace/\n\u251c\u2500\u2500 src/          # Source code\n\u251c\u2500\u2500 data/         # Input data\n\u251c\u2500\u2500 output/       # Results\n\u2514\u2500\u2500 temp/         # Temporary files\n</code></pre>"},{"location":"guide/filesystem/#cleanup","title":"Cleanup","text":"<p>Delete temporary files when done:</p> <pre><code>try:\n    # Work with temporary files\n    ...\nfinally:\n    # Cleanup\n    fs_delete({\n      \"container_id\": c_id,\n      \"path\": \"/workspace/temp\",\n      \"recursive\": true\n    })\n</code></pre>"},{"location":"guide/filesystem/#large-files","title":"Large Files","text":"<p>For large files: 1. Stream through command execution instead 2. Break into chunks 3. Use compression 4. Increase file size limit</p>"},{"location":"guide/filesystem/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guide/filesystem/#path-security-error","title":"Path Security Error","text":"<p>If you get \"path outside workspace\" error:</p> <ol> <li>Check path starts with <code>/workspace</code></li> <li>Verify no <code>..</code> components</li> <li>Ensure symlinks stay in workspace</li> </ol>"},{"location":"guide/filesystem/#etag-conflict","title":"ETag Conflict","text":"<p>If write fails with conflict:</p> <ol> <li>Re-read file to get new ETag</li> <li>Merge changes if needed</li> <li>Retry write with new ETag</li> </ol>"},{"location":"guide/filesystem/#permission-denied","title":"Permission Denied","text":"<p>If operation fails with permission error:</p> <ol> <li>Check container is running as correct user</li> <li>Verify file permissions</li> <li>Check parent directory permissions</li> </ol>"},{"location":"guide/filesystem/#next-steps","title":"Next Steps","text":"<ul> <li>Command Execution - Run commands</li> <li>Container Management - Container lifecycle</li> <li>Security - Security model</li> </ul>"},{"location":"guide/monitoring/","title":"Monitoring","text":"<p>This guide covers monitoring and observability in MCP DevBench.</p>"},{"location":"guide/monitoring/#overview","title":"Overview","text":"<p>MCP DevBench provides comprehensive observability:</p> <ul> <li>Prometheus Metrics - Time-series metrics</li> <li>Structured Logging - JSON-formatted logs</li> <li>Health Checks - Ready and live endpoints</li> <li>Audit Logs - Operation history</li> <li>Performance Tracking - Resource usage</li> </ul>"},{"location":"guide/monitoring/#prometheus-metrics","title":"Prometheus Metrics","text":""},{"location":"guide/monitoring/#enabling-metrics","title":"Enabling Metrics","text":"<p>Enable Prometheus metrics:</p> <pre><code>MCP_METRICS_ENABLED=true\nMCP_METRICS_PORT=9090\n</code></pre> <p>Metrics are exposed at <code>http://localhost:9090/metrics</code>.</p>"},{"location":"guide/monitoring/#available-metrics","title":"Available Metrics","text":"<p>Container Metrics:</p> <ul> <li><code>mcp_containers_total</code> - Total number of containers</li> <li><code>mcp_containers_running</code> - Running containers</li> <li><code>mcp_containers_stopped</code> - Stopped containers</li> <li><code>mcp_container_spawns_total</code> - Total container spawns</li> <li><code>mcp_container_spawn_duration_seconds</code> - Spawn duration histogram</li> </ul> <p>Execution Metrics:</p> <ul> <li><code>mcp_executions_total</code> - Total command executions</li> <li><code>mcp_executions_running</code> - Running executions</li> <li><code>mcp_execution_duration_seconds</code> - Execution duration histogram</li> <li><code>mcp_execution_timeout_total</code> - Total timeouts</li> </ul> <p>Filesystem Metrics:</p> <ul> <li><code>mcp_fs_operations_total</code> - Total filesystem operations</li> <li><code>mcp_fs_read_bytes_total</code> - Total bytes read</li> <li><code>mcp_fs_write_bytes_total</code> - Total bytes written</li> <li><code>mcp_fs_operation_duration_seconds</code> - Operation duration histogram</li> </ul> <p>System Metrics:</p> <ul> <li><code>mcp_server_uptime_seconds</code> - Server uptime</li> <li><code>mcp_api_requests_total</code> - Total API requests</li> <li><code>mcp_api_request_duration_seconds</code> - Request duration histogram</li> <li><code>mcp_api_errors_total</code> - Total API errors</li> </ul>"},{"location":"guide/monitoring/#example-queries","title":"Example Queries","text":"<p>Container spawn rate: <pre><code>rate(mcp_container_spawns_total[5m])\n</code></pre></p> <p>Average execution time: <pre><code>histogram_quantile(0.95, mcp_execution_duration_seconds)\n</code></pre></p> <p>Error rate: <pre><code>rate(mcp_api_errors_total[5m])\n</code></pre></p> <p>Resource usage: <pre><code>sum(container_memory_usage_bytes{container=~\"mcp-devbench.*\"})\n</code></pre></p>"},{"location":"guide/monitoring/#structured-logging","title":"Structured Logging","text":""},{"location":"guide/monitoring/#log-configuration","title":"Log Configuration","text":"<p>Configure logging:</p> <pre><code># Log level\nMCP_LOG_LEVEL=INFO  # DEBUG, INFO, WARNING, ERROR, CRITICAL\n\n# Log format\nMCP_LOG_FORMAT=json  # json or text\n</code></pre>"},{"location":"guide/monitoring/#log-format","title":"Log Format","text":"<p>JSON-structured logs:</p> <pre><code>{\n  \"timestamp\": \"2024-01-15T10:30:00.123Z\",\n  \"level\": \"INFO\",\n  \"logger\": \"mcp_devbench.managers.container_manager\",\n  \"message\": \"Container created\",\n  \"container_id\": \"c_abc123\",\n  \"image\": \"python:3.11-slim\",\n  \"client_name\": \"claude\",\n  \"session_id\": \"session-123\",\n  \"correlation_id\": \"req-xyz789\"\n}\n</code></pre>"},{"location":"guide/monitoring/#log-levels","title":"Log Levels","text":"<ul> <li>DEBUG - Detailed debugging information</li> <li>INFO - General informational messages</li> <li>WARNING - Warning messages (non-critical issues)</li> <li>ERROR - Error messages (operations failed)</li> <li>CRITICAL - Critical issues (server cannot continue)</li> </ul>"},{"location":"guide/monitoring/#correlation-ids","title":"Correlation IDs","text":"<p>Each request gets a unique correlation ID for tracing through logs:</p> <pre><code>{\n  \"correlation_id\": \"req-abc123\",\n  \"message\": \"Starting container spawn\"\n}\n</code></pre>"},{"location":"guide/monitoring/#health-checks","title":"Health Checks","text":""},{"location":"guide/monitoring/#endpoints","title":"Endpoints","text":"<p>Readiness: <pre><code>curl http://localhost:8000/health/ready\n</code></pre></p> <p>Returns 200 if server is ready to accept requests.</p> <p>Liveness: <pre><code>curl http://localhost:8000/health/live\n</code></pre></p> <p>Returns 200 if server is running.</p>"},{"location":"guide/monitoring/#kubernetes","title":"Kubernetes","text":"<p>Health check configuration for Kubernetes:</p> <pre><code>livenessProbe:\n  httpGet:\n    path: /health/live\n    port: 8000\n  initialDelaySeconds: 30\n  periodSeconds: 10\n\nreadinessProbe:\n  httpGet:\n    path: /health/ready\n    port: 8000\n  initialDelaySeconds: 10\n  periodSeconds: 5\n</code></pre>"},{"location":"guide/monitoring/#audit-logging","title":"Audit Logging","text":""},{"location":"guide/monitoring/#configuration","title":"Configuration","text":"<p>Enable audit logging:</p> <pre><code>MCP_AUDIT_ENABLED=true\nMCP_AUDIT_LOG_FILE=/var/log/mcp-devbench/audit.log\n</code></pre>"},{"location":"guide/monitoring/#audit-events","title":"Audit Events","text":"<p>Events logged:</p> <ul> <li><code>container.spawn</code> - Container created</li> <li><code>container.attach</code> - Client attached</li> <li><code>container.kill</code> - Container stopped</li> <li><code>exec.start</code> - Command started</li> <li><code>exec.signal</code> - Signal sent</li> <li><code>fs.read</code> - File read</li> <li><code>fs.write</code> - File written</li> <li><code>fs.delete</code> - File deleted</li> </ul>"},{"location":"guide/monitoring/#audit-format","title":"Audit Format","text":"<pre><code>{\n  \"timestamp\": \"2024-01-15T10:30:00.123Z\",\n  \"event_type\": \"container.spawn\",\n  \"client_name\": \"claude\",\n  \"session_id\": \"session-123\",\n  \"container_id\": \"c_abc123\",\n  \"image\": \"python:3.11-slim\",\n  \"result\": \"success\",\n  \"duration_ms\": 1234\n}\n</code></pre>"},{"location":"guide/monitoring/#dashboards","title":"Dashboards","text":""},{"location":"guide/monitoring/#grafana-dashboard","title":"Grafana Dashboard","text":"<p>Example Grafana dashboard panels:</p> <p>Container Count: <pre><code>mcp_containers_running\n</code></pre></p> <p>Request Rate: <pre><code>sum(rate(mcp_api_requests_total[5m])) by (method)\n</code></pre></p> <p>Error Rate: <pre><code>sum(rate(mcp_api_errors_total[5m])) by (error_type)\n</code></pre></p> <p>P95 Latency: <pre><code>histogram_quantile(0.95, rate(mcp_api_request_duration_seconds_bucket[5m]))\n</code></pre></p>"},{"location":"guide/monitoring/#example-dashboard","title":"Example Dashboard","text":"<pre><code>{\n  \"dashboard\": {\n    \"title\": \"MCP DevBench\",\n    \"panels\": [\n      {\n        \"title\": \"Container Count\",\n        \"targets\": [\n          {\n            \"expr\": \"mcp_containers_running\"\n          }\n        ]\n      },\n      {\n        \"title\": \"Request Rate\",\n        \"targets\": [\n          {\n            \"expr\": \"rate(mcp_api_requests_total[5m])\"\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"guide/monitoring/#alerting","title":"Alerting","text":""},{"location":"guide/monitoring/#alert-rules","title":"Alert Rules","text":"<p>Example Prometheus alert rules:</p> <p>High Error Rate: <pre><code>- alert: HighErrorRate\n  expr: rate(mcp_api_errors_total[5m]) &gt; 0.05\n  for: 5m\n  annotations:\n    summary: \"High error rate detected\"\n</code></pre></p> <p>Container Limit: <pre><code>- alert: TooManyContainers\n  expr: mcp_containers_total &gt; 100\n  for: 5m\n  annotations:\n    summary: \"Too many containers running\"\n</code></pre></p> <p>High Memory: <pre><code>- alert: HighMemoryUsage\n  expr: container_memory_usage_bytes &gt; 1e9\n  for: 5m\n  annotations:\n    summary: \"High memory usage\"\n</code></pre></p>"},{"location":"guide/monitoring/#notification-channels","title":"Notification Channels","text":"<p>Configure alerts to send to: - Email - Slack - PagerDuty - OpsGenie - Webhook</p>"},{"location":"guide/monitoring/#performance-monitoring","title":"Performance Monitoring","text":""},{"location":"guide/monitoring/#key-metrics","title":"Key Metrics","text":"<p>Monitor these metrics:</p> <ol> <li>Latency - P50, P95, P99 request times</li> <li>Throughput - Requests per second</li> <li>Error Rate - Failed requests percentage</li> <li>Saturation - Resource utilization</li> </ol>"},{"location":"guide/monitoring/#slisslos","title":"SLIs/SLOs","text":"<p>Example Service Level Indicators:</p> <ul> <li>Availability: 99.9% uptime</li> <li>Latency: P95 &lt; 100ms</li> <li>Error Rate: &lt; 0.1%</li> <li>Container Spawn Time: P95 &lt; 5s</li> </ul>"},{"location":"guide/monitoring/#tracing-planned","title":"Tracing (Planned)","text":"<p>Future distributed tracing with OpenTelemetry:</p> <pre><code>MCP_TRACING_ENABLED=true\nMCP_TRACING_ENDPOINT=http://jaeger:14268/api/traces\n</code></pre> <p>Will provide: - Request tracing across components - Dependency mapping - Performance bottleneck identification</p>"},{"location":"guide/monitoring/#log-aggregation","title":"Log Aggregation","text":""},{"location":"guide/monitoring/#elk-stack","title":"ELK Stack","text":"<p>Ship logs to Elasticsearch:</p> <pre><code># Filebeat configuration\nfilebeat.inputs:\n- type: log\n  paths:\n    - /var/log/mcp-devbench/*.log\n  json.keys_under_root: true\n\noutput.elasticsearch:\n  hosts: [\"elasticsearch:9200\"]\n</code></pre>"},{"location":"guide/monitoring/#loki","title":"Loki","text":"<p>Ship logs to Grafana Loki:</p> <pre><code># Promtail configuration\nclients:\n  - url: http://loki:3100/loki/api/v1/push\n\nscrape_configs:\n  - job_name: mcp-devbench\n    static_configs:\n      - targets:\n          - localhost\n        labels:\n          app: mcp-devbench\n          __path__: /var/log/mcp-devbench/*.log\n</code></pre>"},{"location":"guide/monitoring/#best-practices","title":"Best Practices","text":""},{"location":"guide/monitoring/#metrics","title":"Metrics","text":"<ol> <li>Use histograms for latency tracking</li> <li>Track percentiles (P50, P95, P99)</li> <li>Monitor trends over time</li> <li>Set up alerts for anomalies</li> <li>Export to long-term storage</li> </ol>"},{"location":"guide/monitoring/#logging","title":"Logging","text":"<ol> <li>Use structured logging (JSON)</li> <li>Include correlation IDs</li> <li>Log at appropriate levels</li> <li>Don't log sensitive data</li> <li>Rotate logs regularly</li> </ol>"},{"location":"guide/monitoring/#alerting_1","title":"Alerting","text":"<ol> <li>Avoid alert fatigue (tune thresholds)</li> <li>Use actionable alerts only</li> <li>Include context in notifications</li> <li>Define escalation policies</li> <li>Test alerts regularly</li> </ol>"},{"location":"guide/monitoring/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guide/monitoring/#high-memory-usage","title":"High Memory Usage","text":"<p>Check metrics: <pre><code>container_memory_usage_bytes{container=~\"mcp-devbench.*\"}\n</code></pre></p>"},{"location":"guide/monitoring/#slow-requests","title":"Slow Requests","text":"<p>Check latency histogram: <pre><code>histogram_quantile(0.95, mcp_api_request_duration_seconds_bucket)\n</code></pre></p>"},{"location":"guide/monitoring/#container-leaks","title":"Container Leaks","text":"<p>Check container count trend: <pre><code>mcp_containers_total\n</code></pre></p>"},{"location":"guide/monitoring/#next-steps","title":"Next Steps","text":"<ul> <li>Operations - Deploy with monitoring</li> <li>Troubleshooting - Debug issues</li> <li>Security - Monitor security</li> </ul>"},{"location":"guide/security/","title":"Security","text":"<p>MCP DevBench is designed with security as a top priority. This guide explains the security model and best practices.</p>"},{"location":"guide/security/#security-architecture","title":"Security Architecture","text":"<pre><code>graph TD\n    A[Client] --&gt;|Authenticated| B[MCP Server]\n    B --&gt;|Policy Check| C[Image Policy Manager]\n    B --&gt;|Create| D[Container]\n    D --&gt;|Restricted| E[Workspace /workspace]\n    D --&gt;|No Access| F[Host System]\n    B --&gt;|Audit| G[Audit Logger]</code></pre>"},{"location":"guide/security/#container-isolation","title":"Container Isolation","text":""},{"location":"guide/security/#read-only-root-filesystem","title":"Read-Only Root Filesystem","text":"<p>Containers run with read-only root filesystem:</p> <pre><code>MCP_CONTAINER_READ_ONLY_ROOTFS=true\n</code></pre> <p>Only <code>/workspace</code> is writable, preventing: - System file modification - Package installation in system directories - Persistent malware</p>"},{"location":"guide/security/#capability-dropping","title":"Capability Dropping","text":"<p>All Linux capabilities are dropped:</p> <pre><code>MCP_CONTAINER_DROP_CAPABILITIES=true\n</code></pre> <p>Prevents containers from: - Changing file ownership - Loading kernel modules - Accessing raw network sockets - Binding to privileged ports</p>"},{"location":"guide/security/#non-root-user","title":"Non-Root User","text":"<p>Containers run as non-root user (UID 1000):</p> <pre><code>User: \"1000:1000\"\n</code></pre> <p>Prevents privilege escalation and limits system access.</p>"},{"location":"guide/security/#no-new-privileges","title":"No New Privileges","text":"<p>Security option prevents privilege escalation:</p> <pre><code>SecurityOpt: [\"no-new-privileges:true\"]\n</code></pre>"},{"location":"guide/security/#resource-limits","title":"Resource Limits","text":""},{"location":"guide/security/#memory-limits","title":"Memory Limits","text":"<p>Default memory limit:</p> <pre><code>MCP_CONTAINER_MEMORY_LIMIT=512  # MB\n</code></pre> <p>Prevents: - Memory exhaustion attacks - Host out-of-memory - Container affecting other containers</p>"},{"location":"guide/security/#cpu-limits","title":"CPU Limits","text":"<p>Default CPU limit:</p> <pre><code>MCP_CONTAINER_CPU_LIMIT=1.0  # cores\n</code></pre> <p>Prevents: - CPU starvation - Noisy neighbor problems - Denial of service</p>"},{"location":"guide/security/#process-limits","title":"Process Limits","text":"<p>Default PID limit:</p> <pre><code>MCP_CONTAINER_PID_LIMIT=256\n</code></pre> <p>Prevents: - Fork bombs - Process table exhaustion - Resource abuse</p>"},{"location":"guide/security/#execution-limits","title":"Execution Limits","text":"<p>Command execution limits:</p> <pre><code># Maximum concurrent executions per container\nMCP_MAX_CONCURRENT_EXECS=4\n\n# Maximum execution timeout\nMCP_MAX_EXEC_TIMEOUT=3600  # seconds\n</code></pre>"},{"location":"guide/security/#network-isolation","title":"Network Isolation","text":""},{"location":"guide/security/#network-mode","title":"Network Mode","text":"<p>By default, containers have no network access:</p> <pre><code>NetworkMode: \"none\"\n</code></pre> <p>For containers requiring network:</p> <pre><code>MCP_ALLOW_NETWORK=false  # Default\n</code></pre>"},{"location":"guide/security/#egress-control","title":"Egress Control","text":"<p>When network is enabled, control egress:</p> <pre><code># Allowed destinations (future feature)\nMCP_NETWORK_ALLOWED_HOSTS=pypi.org,npmjs.com\n</code></pre>"},{"location":"guide/security/#image-policy","title":"Image Policy","text":""},{"location":"guide/security/#allow-list","title":"Allow-List","text":"<p>Only explicitly allowed images can be spawned:</p> <pre><code>MCP_ALLOWED_IMAGES=python:3.11-slim,node:18-slim,ubuntu:22.04\n</code></pre> <p>Prevents: - Malicious images - Vulnerable images - Unauthorized software</p>"},{"location":"guide/security/#image-scanning-planned","title":"Image Scanning (Planned)","text":"<p>Future feature will scan images for vulnerabilities:</p> <pre><code>MCP_IMAGE_SCANNING_ENABLED=true\nMCP_IMAGE_SCAN_MAX_SEVERITY=HIGH\n</code></pre>"},{"location":"guide/security/#filesystem-security","title":"Filesystem Security","text":""},{"location":"guide/security/#path-validation","title":"Path Validation","text":"<p>All paths validated before operations:</p> <pre><code>MCP_VALIDATE_PATHS=true\n</code></pre> <p>Prevents: - Directory traversal attacks - Access to system files - Symlink attacks</p>"},{"location":"guide/security/#workspace-isolation","title":"Workspace Isolation","text":"<p>All operations restricted to <code>/workspace</code>:</p> <pre><code>\u2705 Allowed: /workspace/file.txt\n\u274c Rejected: /etc/passwd\n\u274c Rejected: ../../../etc/passwd\n</code></pre>"},{"location":"guide/security/#file-size-limits","title":"File Size Limits","text":"<p>Maximum file size:</p> <pre><code>MCP_MAX_FILE_SIZE=100  # MB\n</code></pre> <p>Prevents: - Disk exhaustion - Memory exhaustion during reads - DoS attacks</p>"},{"location":"guide/security/#authentication","title":"Authentication","text":""},{"location":"guide/security/#authentication-modes","title":"Authentication Modes","text":"<p>Three authentication modes:</p> <ol> <li> <p>None (development only) <pre><code>MCP_AUTH_MODE=none\n</code></pre></p> </li> <li> <p>Bearer Token <pre><code>MCP_AUTH_MODE=bearer\nMCP_AUTH_BEARER_TOKEN=your-secret-token\n</code></pre></p> </li> <li> <p>OIDC (recommended for production) <pre><code>MCP_AUTH_MODE=oidc\nMCP_OAUTH_CONFIG_URL=https://auth.example.com/.well-known/openid-configuration\nMCP_OAUTH_CLIENT_ID=mcp-devbench\nMCP_OAUTH_CLIENT_SECRET=your-client-secret\n</code></pre></p> </li> </ol> <p>Danger</p> <p>Never use <code>none</code> authentication in production!</p>"},{"location":"guide/security/#token-management","title":"Token Management","text":"<p>For bearer authentication:</p> <ol> <li>Generate strong tokens (32+ bytes)</li> <li>Rotate regularly</li> <li>Store securely (secrets manager)</li> <li>Use HTTPS in production</li> </ol>"},{"location":"guide/security/#audit-logging","title":"Audit Logging","text":""},{"location":"guide/security/#audit-trail","title":"Audit Trail","text":"<p>All operations are logged:</p> <pre><code>MCP_AUDIT_ENABLED=true\nMCP_AUDIT_LOG_FILE=/var/log/mcp-devbench/audit.log\n</code></pre> <p>Audit log includes: - Client identity - Operation type - Container ID - Timestamp - Operation result</p>"},{"location":"guide/security/#log-format","title":"Log Format","text":"<p>Structured JSON logs:</p> <pre><code>{\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"event_type\": \"container.spawn\",\n  \"client_name\": \"claude\",\n  \"session_id\": \"session-123\",\n  \"container_id\": \"c_abc123\",\n  \"image\": \"python:3.11-slim\",\n  \"result\": \"success\"\n}\n</code></pre>"},{"location":"guide/security/#log-retention","title":"Log Retention","text":"<p>Configure log retention:</p> <pre><code># Rotate logs daily\nMCP_AUDIT_LOG_ROTATION=daily\n\n# Keep 30 days\nMCP_AUDIT_LOG_RETENTION_DAYS=30\n</code></pre>"},{"location":"guide/security/#security-best-practices","title":"Security Best Practices","text":""},{"location":"guide/security/#deployment","title":"Deployment","text":"<ol> <li>Always use authentication in production</li> <li>Enable audit logging for compliance</li> <li>Use HTTPS for HTTP transport</li> <li>Restrict Docker socket access</li> <li>Run as non-root user on host</li> <li>Keep images updated regularly</li> <li>Monitor metrics for anomalies</li> </ol>"},{"location":"guide/security/#image-selection","title":"Image Selection","text":"<ol> <li>Use minimal images (alpine, slim)</li> <li>Pin to specific versions with digests</li> <li>Scan images for vulnerabilities</li> <li>Avoid latest tags in production</li> <li>Build custom images for specific needs</li> </ol>"},{"location":"guide/security/#configuration","title":"Configuration","text":"<ol> <li>Set appropriate limits for resources</li> <li>Enable all security options</li> <li>Restrict network access by default</li> <li>Use secrets management for tokens</li> <li>Review configurations regularly</li> </ol>"},{"location":"guide/security/#monitoring","title":"Monitoring","text":"<ol> <li>Track failed authentications</li> <li>Alert on suspicious activity</li> <li>Monitor resource usage</li> <li>Review audit logs regularly</li> <li>Set up alerting for anomalies</li> </ol>"},{"location":"guide/security/#common-threats","title":"Common Threats","text":""},{"location":"guide/security/#container-escape","title":"Container Escape","text":"<p>Threat: Attacker breaks out of container to host.</p> <p>Mitigations: - Read-only rootfs - Dropped capabilities - Non-root user - No new privileges - Seccomp profiles</p>"},{"location":"guide/security/#resource-exhaustion","title":"Resource Exhaustion","text":"<p>Threat: Container consumes all resources.</p> <p>Mitigations: - Memory limits - CPU limits - PID limits - Execution timeouts - Disk quotas</p>"},{"location":"guide/security/#data-exfiltration","title":"Data Exfiltration","text":"<p>Threat: Sensitive data leaked from containers.</p> <p>Mitigations: - Network isolation - Path validation - Audit logging - File size limits - Content filtering</p>"},{"location":"guide/security/#malicious-images","title":"Malicious Images","text":"<p>Threat: Compromised Docker images.</p> <p>Mitigations: - Image allow-list - Image scanning (planned) - Version pinning - Private registries - Supply chain security</p>"},{"location":"guide/security/#incident-response","title":"Incident Response","text":""},{"location":"guide/security/#detection","title":"Detection","text":"<p>Monitor for: - Failed authentication attempts - Unusual resource usage - Access to sensitive paths - Network connections (if enabled) - Container escape attempts</p>"},{"location":"guide/security/#response","title":"Response","text":"<ol> <li>Isolate affected containers</li> <li>Review audit logs</li> <li>Analyze for compromise indicators</li> <li>Remediate vulnerabilities</li> <li>Document incident</li> <li>Update security policies</li> </ol>"},{"location":"guide/security/#compliance","title":"Compliance","text":""},{"location":"guide/security/#standards","title":"Standards","text":"<p>MCP DevBench supports compliance with: - SOC 2 - ISO 27001 - PCI DSS (for appropriate use cases) - GDPR (with proper configuration)</p>"},{"location":"guide/security/#audit-requirements","title":"Audit Requirements","text":"<ul> <li>Audit logging enabled</li> <li>Authentication required</li> <li>Access controls enforced</li> <li>Data retention configured</li> <li>Regular reviews conducted</li> </ul>"},{"location":"guide/security/#security-roadmap","title":"Security Roadmap","text":"<p>Planned security features:</p> <ol> <li>Image vulnerability scanning - Trivy integration</li> <li>Network policies - Fine-grained egress control</li> <li>Security policies - Per-container security configuration</li> <li>Runtime protection - Falco integration</li> <li>Secrets management - Vault integration</li> </ol>"},{"location":"guide/security/#reporting-security-issues","title":"Reporting Security Issues","text":"<p>Found a security vulnerability?</p> <ol> <li>Do NOT open a public issue</li> <li>Email security@mcp-devbench.example (if available)</li> <li>Or use GitHub Security Advisories</li> <li>Include detailed reproduction steps</li> <li>We aim to respond within 48 hours</li> </ol>"},{"location":"guide/security/#next-steps","title":"Next Steps","text":"<ul> <li>Container Management - Container lifecycle</li> <li>Monitoring - Track security metrics</li> <li>Operations - Secure deployment</li> </ul>"},{"location":"operations/deployment/","title":"Deployment","text":"<p>Production deployment guide for MCP DevBench.</p>"},{"location":"operations/deployment/#deployment-options","title":"Deployment Options","text":""},{"location":"operations/deployment/#docker","title":"Docker","text":"<pre><code>docker run -d \\\n  --name mcp-devbench \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -p 8000:8000 \\\n  -e MCP_TRANSPORT_MODE=streamable-http \\\n  -e MCP_AUTH_MODE=bearer \\\n  -e MCP_AUTH_BEARER_TOKEN=${TOKEN} \\\n  ghcr.io/pvliesdonk/mcp-devbench:latest\n</code></pre>"},{"location":"operations/deployment/#docker-compose","title":"Docker Compose","text":"<pre><code>version: '3.8'\nservices:\n  mcp-devbench:\n    image: ghcr.io/pvliesdonk/mcp-devbench:latest\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - ./data:/data\n    ports:\n      - \"8000:8000\"\n      - \"9090:9090\"\n    environment:\n      MCP_TRANSPORT_MODE: streamable-http\n      MCP_AUTH_MODE: oidc\n      MCP_DATABASE_URL: sqlite:////data/mcp-devbench.db\n    restart: unless-stopped\n</code></pre>"},{"location":"operations/deployment/#kubernetes","title":"Kubernetes","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mcp-devbench\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: mcp-devbench\n  template:\n    metadata:\n      labels:\n        app: mcp-devbench\n    spec:\n      containers:\n      - name: mcp-devbench\n        image: ghcr.io/pvliesdonk/mcp-devbench:latest\n        ports:\n        - containerPort: 8000\n        env:\n        - name: MCP_TRANSPORT_MODE\n          value: \"streamable-http\"\n        volumeMounts:\n        - name: docker-sock\n          mountPath: /var/run/docker.sock\n      volumes:\n      - name: docker-sock\n        hostPath:\n          path: /var/run/docker.sock\n</code></pre>"},{"location":"operations/deployment/#production-configuration","title":"Production Configuration","text":"<pre><code># Transport\nMCP_TRANSPORT_MODE=streamable-http\nMCP_HOST=0.0.0.0\nMCP_PORT=8000\n\n# Authentication\nMCP_AUTH_MODE=oidc\nMCP_OAUTH_CONFIG_URL=https://auth.example.com/.well-known/openid-configuration\n\n# Database\nMCP_DATABASE_URL=postgresql://user:pass@db:5432/mcp_devbench\n\n# Security\nMCP_ALLOWED_IMAGES=python:3.11-slim,node:18-slim\nMCP_CONTAINER_MEMORY_LIMIT=512\nMCP_CONTAINER_CPU_LIMIT=1.0\n\n# Observability\nMCP_LOG_LEVEL=INFO\nMCP_LOG_FORMAT=json\nMCP_METRICS_ENABLED=true\nMCP_AUDIT_ENABLED=true\n\n# Features\nMCP_WARM_POOL_ENABLED=true\nMCP_CLEANUP_ENABLED=true\n</code></pre>"},{"location":"operations/deployment/#best-practices","title":"Best Practices","text":"<ol> <li>Use HTTPS - Always use TLS in production</li> <li>Enable Authentication - Never use <code>none</code> mode</li> <li>Set Resource Limits - Prevent resource exhaustion</li> <li>Enable Monitoring - Track metrics and logs</li> <li>Regular Backups - Backup database and configs</li> <li>Keep Updated - Update to latest versions</li> <li>Review Logs - Monitor for security issues</li> </ol>"},{"location":"operations/deployment/#next-steps","title":"Next Steps","text":"<ul> <li>Monitoring - Set up observability</li> <li>Troubleshooting - Debug issues</li> </ul>"},{"location":"operations/monitoring/","title":"Operations Monitoring","text":"<p>Monitoring and observability for production deployments.</p>"},{"location":"operations/monitoring/#metrics","title":"Metrics","text":"<p>MCP DevBench exports Prometheus metrics at <code>/metrics</code>.</p>"},{"location":"operations/monitoring/#key-metrics-to-monitor","title":"Key Metrics to Monitor","text":"<ul> <li><code>mcp_containers_total</code> - Total containers</li> <li><code>mcp_containers_running</code> - Running containers</li> <li><code>mcp_api_requests_total</code> - API requests</li> <li><code>mcp_api_errors_total</code> - API errors</li> <li><code>mcp_execution_duration_seconds</code> - Execution latency</li> </ul>"},{"location":"operations/monitoring/#grafana-dashboards","title":"Grafana Dashboards","text":"<p>Import pre-built dashboards from GitHub repo.</p>"},{"location":"operations/monitoring/#logging","title":"Logging","text":""},{"location":"operations/monitoring/#log-aggregation","title":"Log Aggregation","text":"<p>Use Filebeat, Fluentd, or similar to ship logs to: - Elasticsearch - Loki - CloudWatch - Datadog</p>"},{"location":"operations/monitoring/#log-queries","title":"Log Queries","text":"<p>Common queries: - Failed authentications - Container spawn failures - Resource exhaustion - Security violations</p>"},{"location":"operations/monitoring/#alerting","title":"Alerting","text":""},{"location":"operations/monitoring/#recommended-alerts","title":"Recommended Alerts","text":"<ol> <li>High Error Rate - Error rate &gt; 5%</li> <li>Container Limit - Too many containers</li> <li>High Latency - P95 latency &gt; 1s</li> <li>Failed Authentication - Multiple auth failures</li> <li>Resource Usage - High CPU/memory</li> </ol> <p>See Monitoring Guide for details.</p>"},{"location":"operations/troubleshooting/","title":"Troubleshooting","text":"<p>Common issues and solutions.</p>"},{"location":"operations/troubleshooting/#container-wont-start","title":"Container Won't Start","text":"<p>Symptom: Container fails to spawn</p> <p>Solutions: 1. Check Docker is running 2. Verify image exists 3. Check image is in allow-list 4. Review container logs 5. Check resource limits</p>"},{"location":"operations/troubleshooting/#high-memory-usage","title":"High Memory Usage","text":"<p>Symptom: Server using too much memory</p> <p>Solutions: 1. Reduce container count 2. Lower memory limits 3. Enable cleanup 4. Check for memory leaks</p>"},{"location":"operations/troubleshooting/#authentication-failures","title":"Authentication Failures","text":"<p>Symptom: 401/403 errors</p> <p>Solutions: 1. Verify token is correct 2. Check OIDC configuration 3. Review audit logs 4. Test with curl</p>"},{"location":"operations/troubleshooting/#database-errors","title":"Database Errors","text":"<p>Symptom: Database connection failures</p> <p>Solutions: 1. Check connection string 2. Verify database is running 3. Check permissions 4. Review migrations</p>"},{"location":"operations/troubleshooting/#docker-socket-permission","title":"Docker Socket Permission","text":"<p>Symptom: Permission denied accessing Docker</p> <p>Solutions: <pre><code># Add user to docker group\nsudo usermod -aG docker $USER\n\n# Or run as root (not recommended)\nsudo python -m mcp_devbench.server\n</code></pre></p>"},{"location":"operations/troubleshooting/#logs","title":"Logs","text":"<p>Check logs for more details:</p> <pre><code># Docker\ndocker logs mcp-devbench\n\n# Systemd\njournalctl -u mcp-devbench\n\n# File\ntail -f /var/log/mcp-devbench/server.log\n</code></pre>"},{"location":"operations/troubleshooting/#getting-help","title":"Getting Help","text":"<ul> <li>GitHub Issues: Report bugs</li> <li>Discussions: Ask questions</li> </ul>"}]}